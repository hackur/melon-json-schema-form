{"version":3,"sources":["Boolean.js"],"names":["factory","type","BooleanField","shouldComponentUpdate","nextProps","props","render","name","value","schema","onChange","title","displayName","propTypes","bool","registerComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;QAQYA,O;;;;AARZ;;;;;AAWO,QAAMC,sBAAO,SAAb;;QAEcC,Y;;;;;;;;+BAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;+BAEDC,M,qBAAS;AAAA,yBAOD,KAAKD,KAPJ;AAAA,gBAGDE,IAHC,UAGDA,IAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,MALC,UAKDA,MALC;AAAA,gBAMDC,QANC,UAMDA,QANC;;;AASL,gBAAMC,QAAQF,OAAOE,KAArB;;AAEA,mBACI;AAAA;AAAA,kBAAK,WAAU,0BAAf;AACKA,wBAAQ;AAAA;AAAA,sBAAO,MAAK,KAAZ;AAAmBA;AAAnB,iBAAR,GAA4C,IADjD;AAEI;AAAA;AAAA,sBAAK,WAAU,oBAAf;AACI;AACI,+BAAOF,MADX;AAEI,8BAAMF,IAFV;AAGI,+BAAOC,KAHX;AAII,sCAAcC,iBAJlB;AAKI,mCAAW,IALf;AAMI,oCAAY,KANhB;AAOI,kCAAUC,QAPd;AADJ;AAFJ,aADJ;AAgBH,S;;;;;yBAjCgBR,Y;;;AAqCrBA,iBAAaU,WAAb,GAA2BX,IAA3B;;AAEAC,iBAAaW,SAAb,GAAyB;AACrBL,eAAO,iBAAUM;AADI,KAAzB;;AAIAd,YAAQe,iBAAR,CAA0B,UAAUN,MAAV,EAAkB;;AAExC,YAAIA,OAAOR,IAAP,KAAgB,SAApB,EAA+B;AAC3B,mBAAOC,YAAP;AACH;AAEJ,KAND","file":"Boolean.js","sourcesContent":["/**\n * @file BooleanField\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport Toggle from 'melon/Toggle';\nimport Title from 'melon/Title';\nimport * as factory from './factory';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport const type = 'Boolean';\n\nexport default class BooleanField extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            name,\n            value,\n            schema,\n            onChange\n        } = this.props;\n\n        const title = schema.title;\n\n        return (\n            <div className=\"ui-field variant-boolean\">\n                {title ? <Title size=\"xxs\">{title}</Title> : null}\n                <div className=\"ui-field-component\">\n                    <Toggle\n                        rules={schema}\n                        name={name}\n                        value={value}\n                        defaultValue={schema.default}\n                        trueValue={true}\n                        falseValue={false}\n                        onChange={onChange} />\n                </div>\n            </div>\n        );\n\n    }\n\n}\n\nBooleanField.displayName = type;\n\nBooleanField.propTypes = {\n    value: PropTypes.bool\n};\n\nfactory.registerComponent(function (schema) {\n\n    if (schema.type === 'boolean') {\n        return BooleanField;\n    }\n\n});\n"]}