{"version":3,"sources":["Form.js"],"names":["jp","validator","jsonPointers","allErrors","addFormat","JSONSchemaForm","args","onSubmit","bind","onFieldChange","isValidFormField","field","value","getValue","pointer","props","name","disabled","getData","type","schema","fields","reduceRight","data","set","validate","validity","checkValidity","states","isValid","invalidFieldMap","reduce","map","state","dataPath","first","i","length","setCustomValidity","message","findDOMNode","scrollIntoView","e","noValidate","preventDefault","render","uiSchema","renderForm","rest","properties","displayName","defaultProps","concat","children","propTypes","object","isRequired","func","childContextTypes"],"mappings":"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","file":"Form.js","sourcesContent":["/**\n * @file melon json schema form\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PropTypes} from 'react';\nimport Form from 'melon-core/Form';\nimport Validator from 'melon-json-schema-validator';\nimport * as jp from './pointer';\nimport ReactDOM from 'react-dom';\nimport Field from './Field';\nimport {getOrderedKeys} from './util/getOrderedKeys';\n\nconst validator = new Validator({\n    jsonPointers: true,\n    allErrors: true\n});\n\nvalidator.addFormat('color', /^#[0-9a-f]{6}$/i);\n\nexport default class JSONSchemaForm extends Form {\n\n    constructor(...args) {\n        super(...args);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onFieldChange = this.onFieldChange.bind(this);\n    }\n\n    isValidFormField(field) {\n\n        const value = field.getValue();\n        const {pointer, props} = field;\n        const {name, disabled} = props;\n\n        return name\n            && !disabled\n            && value != null\n            && pointer;\n\n    }\n\n    getData() {\n\n        const type = this.props.schema.type;\n\n        return this.fields.reduceRight(\n            function (data, field) {\n                jp.set(data, field.pointer, field.getValue());\n                return data;\n            },\n            type === 'array' ? [] : {}\n        );\n\n    }\n\n    validate() {\n\n        const data = this.getData();\n        const validity = this.checkValidity(data);\n        const fields = this.fields;\n        const states = validity.states;\n        const isValid = validity.isValid();\n\n        const invalidFieldMap = states.reduce(function (map, state) {\n            map[state.dataPath] = state;\n            return map;\n        }, {});\n\n        let first = null;\n\n        for (let i = fields.length - 1; i >= 0; i--) {\n            const field = fields[i];\n            const state = invalidFieldMap[field.pointer];\n\n            if (state) {\n                field.setCustomValidity(state.message);\n                first = field;\n            }\n            else {\n                field.setCustomValidity(null);\n            }\n\n        }\n\n        if (first) {\n            ReactDOM.findDOMNode(first).scrollIntoView();\n        }\n\n        return isValid;\n    }\n\n    checkValidity(data) {\n        return this.props.validator.validate(data, this);\n    }\n\n    onSubmit(e) {\n\n        const {\n            noValidate,\n            onSubmit\n        } = this.props;\n\n        if (!noValidate) {\n            if (!this.validate()) {\n                e.preventDefault();\n                return;\n            }\n        }\n\n        if (onSubmit) {\n            e.data = this.getData();\n            onSubmit(e);\n        }\n    }\n\n    onFieldChange(e) {\n        const onFieldChange = this.props.onFieldChange;\n        if (onFieldChange) {\n            onFieldChange(e);\n        }\n    }\n\n    render() {\n\n        const {\n            schema,\n            uiSchema = {},\n            value = {},\n            renderForm,\n            ...rest\n        } = this.props;\n\n        const properties = schema.properties;\n\n        const fields = getOrderedKeys(schema.properties, uiSchema['@order'])\n            .map(name => (\n                <Field\n                    name={name}\n                    key={name}\n                    schema={properties[name]}\n                    uiSchema={uiSchema[name]}\n                    value={value[name]}\n                    onChange={this.onFieldChange} />\n            ));\n\n        return (\n            <form {...rest} onSubmit={this.onSubmit}>\n                {renderForm(this.props, fields)}\n            </form>\n        );\n\n    }\n\n}\n\nJSONSchemaForm.displayName = 'JSONSchemaForm';\n\nJSONSchemaForm.defaultProps = {\n    validator,\n    renderForm(props, fields = []) {\n        return fields.concat(props.children);\n    }\n};\n\nJSONSchemaForm.propTypes = {\n    ...Form.propTypes,\n    schema: PropTypes.object.isRequired,\n    onFieldChange: PropTypes.func\n};\n\nJSONSchemaForm.childContextTypes = Form.childContextTypes;\n"],"sourceRoot":"/source/"}