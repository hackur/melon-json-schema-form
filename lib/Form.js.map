{"version":3,"sources":["Form.js"],"names":["jp","validator","jsonPointers","allErrors","addFormat","JSONSchemaForm","isValidFormField","field","value","getValue","pointer","props","name","disabled","getData","type","schema","fields","reduceRight","data","set","validate","validity","checkValidity","states","isValid","invalidFieldMap","reduce","map","state","dataPath","first","i","length","setCustomValidity","message","findDOMNode","scrollIntoView","displayName","defaultProps","propTypes","object","isRequired","childContextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;QAQYA,E;;;;AARZ;;;;;AAWA,QAAMC,YAAY,0CAAc;AAC5BC,sBAAc,IADc;AAE5BC,mBAAW;AAFiB,KAAd,CAAlB;;AAKAF,cAAUG,SAAV,CAAoB,OAApB,EAA6B,iBAA7B;;QAEqBC,c;;;;;;;;iCAEjBC,gB,6BAAiBC,K,EAAO;;AAEpB,gBAAMC,QAAQD,MAAME,QAAN,EAAd;AAFoB,gBAGbC,OAHa,GAGKH,KAHL,CAGbG,OAHa;AAAA,gBAGJC,KAHI,GAGKJ,KAHL,CAGJI,KAHI;AAAA,gBAIbC,IAJa,GAIKD,KAJL,CAIbC,IAJa;AAAA,gBAIPC,QAJO,GAIKF,KAJL,CAIPE,QAJO;;;AAMpB,mBAAOD,QACA,CAACC,QADD,IAEAL,SAAS,IAFT,IAGAE,OAHP;AAKH,S;;iCAEDI,O,sBAAU;;AAEN,gBAAMC,OAAO,KAAKJ,KAAL,CAAWK,MAAX,CAAkBD,IAA/B;;AAEA,mBAAO,KAAKE,MAAL,CAAYC,WAAZ,CACH,UAAUC,IAAV,EAAgBZ,KAAhB,EAAuB;AACnBP,mBAAGoB,GAAH,CAAOD,IAAP,EAAaZ,MAAMG,OAAnB,EAA4BH,MAAME,QAAN,EAA5B;AACA,uBAAOU,IAAP;AACH,aAJE,EAKHJ,SAAS,OAAT,GAAmB,EAAnB,GAAwB,EALrB,CAAP;AAQH,S;;iCAEDM,Q,uBAAW;;AAEP,gBAAMF,OAAO,KAAKL,OAAL,EAAb;AACA,gBAAMQ,WAAW,KAAKC,aAAL,CAAmBJ,IAAnB,CAAjB;AACA,gBAAMF,SAAS,KAAKA,MAApB;AACA,gBAAMO,SAASF,SAASE,MAAxB;AACA,gBAAMC,UAAUH,SAASG,OAAT,EAAhB;;AAEA,gBAAMC,kBAAkBF,OAAOG,MAAP,CAAc,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AACxDD,oBAAIC,MAAMC,QAAV,IAAsBD,KAAtB;AACA,uBAAOD,GAAP;AACH,aAHuB,EAGrB,EAHqB,CAAxB;;AAKA,gBAAIG,QAAQ,IAAZ;;AAEA,iBAAK,IAAIC,IAAIf,OAAOgB,MAAP,GAAgB,CAA7B,EAAgCD,KAAK,CAArC,EAAwCA,GAAxC,EAA6C;AACzC,oBAAMzB,QAAQU,OAAOe,CAAP,CAAd;AACA,oBAAMH,QAAQH,gBAAgBnB,MAAMG,OAAtB,CAAd;;AAEA,oBAAImB,KAAJ,EAAW;AACPtB,0BAAM2B,iBAAN,CAAwBL,MAAMM,OAA9B;AACAJ,4BAAQxB,KAAR;AACH,iBAHD,MAIK;AACDA,0BAAM2B,iBAAN,CAAwB,IAAxB;AACH;AAEJ;;AAED,gBAAIH,KAAJ,EAAW;AACP,sCAASK,WAAT,CAAqBL,KAArB,EAA4BM,cAA5B;AACH;;AAED,mBAAOZ,OAAP;AACH,S;;iCAEDF,a,0BAAcJ,I,EAAM;AAChB,mBAAO,KAAKR,KAAL,CAAWV,SAAX,CAAqBoB,QAArB,CAA8BF,IAA9B,EAAoC,IAApC,CAAP;AACH,S;;;;;yBAnEgBd,c;;;AAuErBA,mBAAeiC,WAAf,GAA6B,gBAA7B;;AAEAjC,mBAAekC,YAAf,GAA8B;AAC1BtC;AAD0B,KAA9B;;AAIAI,mBAAemC,SAAf,+BACO,kBAAKA,SADZ;AAEIxB,gBAAQ,iBAAUyB,MAAV,CAAiBC;AAF7B;;AAKArC,mBAAesC,iBAAf,GAAmC,kBAAKA,iBAAxC","file":"Form.js","sourcesContent":["/**\n * @file melon json schema form\n * @author leon(ludafa@outlook.com)\n */\n\nimport {PropTypes} from 'react';\nimport Form from 'melon-core/Form';\nimport Validator from 'melon-json-schema-validator';\nimport * as jp from './pointer';\nimport ReactDOM from 'react-dom';\n\nconst validator = new Validator({\n    jsonPointers: true,\n    allErrors: true\n});\n\nvalidator.addFormat('color', /^#[0-9a-f]{6}$/i);\n\nexport default class JSONSchemaForm extends Form {\n\n    isValidFormField(field) {\n\n        const value = field.getValue();\n        const {pointer, props} = field;\n        const {name, disabled} = props;\n\n        return name\n            && !disabled\n            && value != null\n            && pointer;\n\n    }\n\n    getData() {\n\n        const type = this.props.schema.type;\n\n        return this.fields.reduceRight(\n            function (data, field) {\n                jp.set(data, field.pointer, field.getValue());\n                return data;\n            },\n            type === 'array' ? [] : {}\n        );\n\n    }\n\n    validate() {\n\n        const data = this.getData();\n        const validity = this.checkValidity(data);\n        const fields = this.fields;\n        const states = validity.states;\n        const isValid = validity.isValid();\n\n        const invalidFieldMap = states.reduce(function (map, state) {\n            map[state.dataPath] = state;\n            return map;\n        }, {});\n\n        let first = null;\n\n        for (let i = fields.length - 1; i >= 0; i--) {\n            const field = fields[i];\n            const state = invalidFieldMap[field.pointer];\n\n            if (state) {\n                field.setCustomValidity(state.message);\n                first = field;\n            }\n            else {\n                field.setCustomValidity(null);\n            }\n\n        }\n\n        if (first) {\n            ReactDOM.findDOMNode(first).scrollIntoView();\n        }\n\n        return isValid;\n    }\n\n    checkValidity(data) {\n        return this.props.validator.validate(data, this);\n    }\n\n}\n\nJSONSchemaForm.displayName = 'JSONSchemaForm';\n\nJSONSchemaForm.defaultProps = {\n    validator\n};\n\nJSONSchemaForm.propTypes = {\n    ...Form.propTypes,\n    schema: PropTypes.object.isRequired\n};\n\nJSONSchemaForm.childContextTypes = Form.childContextTypes;\n"],"sourceRoot":"/source/"}