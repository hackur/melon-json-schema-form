{"version":3,"sources":["util/field.js"],"names":["format","value","props","schema","type","Array","isArray","Error"],"mappings":";;;;;;;;;;;;;;;;YAKgBA,M,GAAAA,M;;;;;;;;AALhB;;;;;AAKO,aAASA,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8B;;AAEjC,YAAIC,SAASD,MAAMC,MAAnB;;AAEA,gBAAQA,OAAOC,IAAf;;AAEI,iBAAK,QAAL;AACI,uBAAOH,SAAS,IAAT,GAAgB,EAAhB,GAAqBA,KAA5B;;AAEJ,iBAAK,SAAL;AACA,iBAAK,QAAL;AACA,iBAAK,SAAL;AACI,uBAAOA,KAAP;;AAEJ,iBAAK,QAAL;AACI,uBAAOA,SAAS,IAAT,IAAiB,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAlC,GAA6C,EAA7C,GAAkDA,KAAzD;;AAEJ,iBAAK,OAAL;AACI,uBAAOI,MAAMC,OAAN,CAAcL,KAAd,IAAuBA,KAAvB,GAA+B,EAAtC;;AAEJ;AACI,sBAAM,IAAIM,KAAJ,CAAaJ,OAAOC,IAApB,uBAAN;;AAjBR;AAqBH","file":"field.js","sourcesContent":["/**\n * @file field utils\n * @author leon <ludafa@outlook.com>\n */\n\nexport function format(value, props) {\n\n    let schema = props.schema;\n\n    switch (schema.type) {\n\n        case 'string':\n            return value == null ? '' : value;\n\n        case 'boolean':\n        case 'number':\n        case 'integer':\n            return value;\n\n        case 'object':\n            return value == null || typeof value !== 'object' ? {} : value;\n\n        case 'array':\n            return Array.isArray(value) ? value : [];\n\n        default:\n            throw new Error(`${schema.type} is not supported`);\n\n    }\n\n}\n"]}