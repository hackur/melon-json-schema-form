{"version":3,"sources":["string/Text.js"],"names":["TextField","args","onKeyDown","bind","onBlur","e","props","onChange","value","nextValue","target","keyCode","type","refs","textbox","currentValue","getValue","shouldComponentUpdate","nextProps","render","schema","name","maxLength","placeholder","title","titleClassName","propTypes","object","isRequired","string","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QAWqBA,S;;;AAEjB,6BAAqB;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAAA,qEACjB,gDAASA,IAAT,EADiB;;AAEjB,kBAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AACA,kBAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYD,IAAZ,OAAd;AAHiB;AAIpB;;4BAEDD,S,sBAAUG,C,EAAG;AAAA,yBAEiB,KAAKC,KAFtB;AAAA,gBAEFC,QAFE,UAEFA,QAFE;AAAA,gBAEQC,KAFR,UAEQA,KAFR;;;AAIT,gBAAMC,YAAYJ,EAAEK,MAAF,CAASF,KAA3B;;AAEA,gBAAIH,EAAEM,OAAF,KAAc,EAAd,IAAoBF,cAAcD,KAAtC,EAA6C;AACzCD,yBAAS;AACLK,0BAAM,QADD;AAELF,4BAAQ,KAAKG,IAAL,CAAUC,OAFb;AAGLN,2BAAOC,aAAaD;AAHf,iBAAT;AAKH;AACJ,S;;4BAEDJ,M,mBAAOC,C,EAAG;AAAA,0BAEoB,KAAKC,KAFzB;AAAA,gBAECE,KAFD,WAECA,KAFD;AAAA,gBAEQD,QAFR,WAEQA,QAFR;;AAGN,gBAAMG,SAASL,EAAEK,MAAjB;AACA,gBAAMK,eAAeL,OAAOM,QAAP,EAArB;;AAEAT,qBAAS;AACLK,sBAAM,QADD;AAELF,8BAFK;AAGLF,uBAAOO,gBAAgBP;AAHlB,aAAT;AAMH,S;;4BAEDS,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKZ,KAA7B,CAAR;AACH,S;;4BAEDa,M,qBAAS;AAAA,0BAMD,KAAKb,KANJ;AAAA,gBAGDc,MAHC,WAGDA,MAHC;AAAA,gBAIDZ,KAJC,WAIDA,KAJC;AAAA,gBAKDa,IALC,WAKDA,IALC;AAAA,gBASDC,SATC,GAYDF,MAZC,CASDE,SATC;AAAA,gBAUDC,WAVC,GAYDH,MAZC,CAUDG,WAVC;AAAA,gBAWDC,KAXC,GAYDJ,MAZC,CAWDI,KAXC;;;AAcL,gBAAMC,iBAAiB,gCACnB,gBADmB,EAEnB,iBAFmB,CAAvB;;AAKA,mBACI;AAAA;AAAA,kBAAK,WAAU,yCAAf;AACI;AAAA;AAAA,sBAAQ,WAAWA,cAAnB;AAAoCD;AAApC,iBADJ;AAEI;AACI,yBAAI,SADR;AAEI,0BAAK,KAFT;AAGI,8BAAU,CAAC,OAAD,CAHd;AAII,+BAAWF,aAAaA,aAAa,GAJzC;AAKI,iCAAaC,WALjB;AAMI,0BAAMF,IANV;AAOI,2BAAOD,MAPX;AAQI,2BAAOZ,KARX;AASI,kCAAcY,iBATlB;AAUI,+BAAW,KAAKlB,SAVpB;AAWI,4BAAQ,KAAKE,MAXjB;AAFJ,aADJ;AAkBH,S;;;;;yBA9EgBJ,S;;;AAkFrBA,cAAU0B,SAAV,GAAsB;AAClBN,gBAAQ,iBAAUO,MAAV,CAAiBC,UADP;AAElBpB,eAAO,iBAAUqB,MAFC;AAGlBtB,kBAAU,iBAAUuB,IAAV,CAAeF;AAHP,KAAtB;;AAMA,oCAAkB,UAAUR,MAAV,EAAkB;;AAEhC,YAAIA,OAAOR,IAAP,KAAgB,QAApB,EAA8B;AAC1B,mBAAOZ,SAAP;AACH;AAEJ,KAND","file":"Text.js","sourcesContent":["/**\n * @file Text\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport TextBox from 'melon/TextBox';\nimport {registerComponent} from '../factory';\nimport {createClassName} from 'melon-core/classname/classname';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport default class TextField extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n    }\n\n    onKeyDown(e) {\n\n        const {onChange, value} = this.props;\n\n        const nextValue = e.target.value;\n\n        if (e.keyCode === 13 && nextValue !== value) {\n            onChange({\n                type: 'change',\n                target: this.refs.textbox,\n                value: nextValue || value\n            });\n        }\n    }\n\n    onBlur(e) {\n\n        const {value, onChange} = this.props;\n        const target = e.target;\n        const currentValue = target.getValue();\n\n        onChange({\n            type: 'change',\n            target,\n            value: currentValue || value\n        });\n\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            name\n        } = this.props;\n\n        const {\n            maxLength,\n            placeholder,\n            title\n        } = schema;\n\n        const titleClassName = createClassName(\n            'ui-field-title',\n            'variant-level-4'\n        );\n\n        return (\n            <div className=\"ui-field ui-field-string variant-string\">\n                <header className={titleClassName}>{title}</header>\n                <TextBox\n                    ref=\"textbox\"\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    multiline={maxLength && maxLength >= 120}\n                    placeholder={placeholder}\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    defaultValue={schema.default}\n                    onKeyDown={this.onKeyDown}\n                    onBlur={this.onBlur} />\n            </div>\n        );\n\n    }\n\n}\n\nTextField.propTypes = {\n    schema: PropTypes.object.isRequired,\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nregisterComponent(function (schema) {\n\n    if (schema.type === 'string') {\n        return TextField;\n    }\n\n});\n"]}