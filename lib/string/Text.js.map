{"version":3,"sources":["string/Text.js"],"names":["TextField","shouldComponentUpdate","nextProps","props","render","schema","value","onChange","name","maxLength","placeholder","title","titleClassName","propTypes","object","isRequired","string","func","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QAWqBA,S;;;;;;;;4BAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;4BAEDC,M,qBAAS;AAAA,yBAOD,KAAKD,KAPJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,QALC,UAKDA,QALC;AAAA,gBAMDC,IANC,UAMDA,IANC;AAAA,gBAUDC,SAVC,GAaDJ,MAbC,CAUDI,SAVC;AAAA,gBAWDC,WAXC,GAaDL,MAbC,CAWDK,WAXC;AAAA,gBAYDC,KAZC,GAaDN,MAbC,CAYDM,KAZC;;;AAeL,gBAAMC,iBAAiB,gCACnB,gBADmB,EAEnB,iBAFmB,CAAvB;;AAKA,mBACI;AAAA;AAAA,kBAAK,WAAU,yCAAf;AACI;AAAA;AAAA,sBAAQ,WAAWA,cAAnB;AAAoCD;AAApC,iBADJ;AAEI;AACI,0BAAK,KADT;AAEI,8BAAU,CAAC,OAAD,CAFd;AAGI,+BAAWF,aAAaA,aAAa,GAHzC;AAII,iCAAaC,WAJjB;AAKI,0BAAMF,IALV;AAMI,2BAAOH,MANX;AAOI,2BAAOC,KAPX;AAQI,kCAAcD,iBARlB;AASI,8BAAUE,QATd;AAFJ,aADJ;AAgBH,S;;;;;yBA1CgBP,S;;;AA8CrBA,cAAUa,SAAV,GAAsB;AAClBR,gBAAQ,iBAAUS,MAAV,CAAiBC,UADP;AAElBT,eAAO,iBAAUU,MAFC;AAGlBT,kBAAU,iBAAUU;AAHF,KAAtB;;AAMA,oCAAkB,UAAUZ,MAAV,EAAkB;;AAEhC,YAAIA,OAAOa,IAAP,KAAgB,QAApB,EAA8B;AAC1B,mBAAOlB,SAAP;AACH;AAEJ,KAND","file":"string/Text.js","sourcesContent":["/**\n * @file Text\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport TextBox from 'melon/TextBox';\nimport {registerComponent} from '../factory';\nimport {createClassName} from 'melon-core/classname/classname';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport default class TextField extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            onChange,\n            name\n        } = this.props;\n\n        const {\n            maxLength,\n            placeholder,\n            title\n        } = schema;\n\n        const titleClassName = createClassName(\n            'ui-field-title',\n            'variant-level-4'\n        );\n\n        return (\n            <div className=\"ui-field ui-field-string variant-string\">\n                <header className={titleClassName}>{title}</header>\n                <TextBox\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    multiline={maxLength && maxLength >= 120}\n                    placeholder={placeholder}\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    defaultValue={schema.default}\n                    onChange={onChange} />\n            </div>\n        );\n\n    }\n\n}\n\nTextField.propTypes = {\n    schema: PropTypes.object.isRequired,\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nregisterComponent(function (schema) {\n\n    if (schema.type === 'string') {\n        return TextField;\n    }\n\n});\n"],"sourceRoot":"/source/"}