{"version":3,"sources":["string/EnumText.js"],"names":["EnumTextField","shouldComponentUpdate","nextProps","props","render","schema","value","onChange","name","title","enumNames","titleClassName","map","item","index","propTypes","object","isRequired","string","func","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QAWqBA,a;;;;;;;;gCAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;gCAEDC,M,qBAAS;AAAA,yBAOD,KAAKD,KAPJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,QALC,UAKDA,QALC;AAAA,gBAMDC,IANC,UAMDA,IANC;AAAA,gBAUDC,KAVC,GAYDJ,MAZC,CAUDI,KAVC;AAAA,gBAWDC,SAXC,GAYDL,MAZC,CAWDK,SAXC;;;AAcL,gBAAMC,iBAAiB,gCACnB,gBADmB,EAEnB,iBAFmB,CAAvB;;AAKA,mBACI;AAAA;AAAA,kBAAK,WAAU,yCAAf;AACI;AAAA;AAAA,sBAAQ,WAAWA,cAAnB;AAAoCF;AAApC,iBADJ;AAEI;AAAA;AAAA;AACI,8BAAK,KADT;AAEI,kCAAU,CAAC,OAAD,CAFd;AAGI,8BAAMD,IAHV;AAII,+BAAOH,MAJX;AAKI,+BAAOC,KALX;AAMI,sCAAcD,iBANlB;AAOI,kCAAUE,QAPd;AAQKF,mCAAYO,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP;AAAA,+BACb;AAAA;AAAA,8BAAQ,KAAKD,IAAb,EAAmB,OAAOA,IAA1B;AACKH,yCAAaA,UAAUI,KAAV,CAAb,IAAiCD;AADtC,yBADa;AAAA,qBAAhB;AARL;AAFJ,aADJ;AAoBH,S;;;;;yBA7CgBb,a;;;AAiDrBA,kBAAce,SAAd,GAA0B;AACtBV,gBAAQ,iBAAUW,MAAV,CAAiBC,UADH;AAEtBX,eAAO,iBAAUY,MAFK;AAGtBX,kBAAU,iBAAUY,IAAV,CAAeF;AAHH,KAA1B;;AAMA,oCAAkB,UAAUZ,MAAV,EAAkB;;AAEhC,YACIA,OAAOe,IAAP,KAAgB,QAAhB,IACGf,cAFP,EAGE;AACE,mBAAOL,aAAP;AACH;AAEJ,KATD","file":"string/EnumText.js","sourcesContent":["/**\n * @file EnumTextField\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport Select from 'melon/Select';\nimport {registerComponent} from '../factory';\nimport {createClassName} from 'melon-core/classname/classname';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport default class EnumTextField extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            onChange,\n            name\n        } = this.props;\n\n        const {\n            title,\n            enumNames\n        } = schema;\n\n        const titleClassName = createClassName(\n            'ui-field-title',\n            'variant-level-4'\n        );\n\n        return (\n            <div className=\"ui-field ui-field-string variant-string\">\n                <header className={titleClassName}>{title}</header>\n                <Select\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    defaultValue={schema.default}\n                    onChange={onChange}>\n                    {schema.enum.map((item, index) => (\n                        <option key={item} value={item}>\n                            {enumNames && enumNames[index] || item}\n                        </option>\n                    ))}\n                </Select>\n            </div>\n        );\n\n    }\n\n}\n\nEnumTextField.propTypes = {\n    schema: PropTypes.object.isRequired,\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nregisterComponent(function (schema) {\n\n    if (\n        schema.type === 'string'\n        && schema.enum\n    ) {\n        return EnumTextField;\n    }\n\n});\n"],"sourceRoot":"/source/"}