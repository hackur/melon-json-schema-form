{"version":3,"sources":["Array.js"],"names":["factory","ArrayComponent","renderArray","schema","value","pointer","items","title","map","record","index","type","recordPointer","Field","getComponent","onChange","target","slice","concat","e","renderTuple","item","render","props","state","Array","isArray","propTypes","array","defaultValue","defaultProps","registerComponent"],"mappings":"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","file":"Array.js","sourcesContent":["/**\n * @file array render\n * @author leon(ludafa@outlook.com)\n */\n\nimport * as factory from './factory';\nimport React, {PropTypes} from 'react';\nimport Title from 'melon/Title';\nimport InputComponent from 'melon/InputComponent';\n\nexport default class ArrayComponent extends InputComponent {\n\n    renderArray(schema, value, pointer) {\n\n        const {items, title} = schema;\n\n        return (\n            <section className=\"ui-field variant-array\" rules={schema} key={pointer}>\n                <Title level={3}>{title}</Title>\n                {value.map((record, index) => {\n                    const type = items.type;\n                    const recordPointer = `${pointer}/${index}`;\n                    const Field = factory.getComponent(type);\n                    return (\n                        <Field\n                            key={recordPointer}\n                            name={index + ''}\n                            value={record}\n                            schema={items}\n                            onChange={e => {\n                                super.onChange({\n                                    type: 'change',\n                                    target: this,\n                                    value: value\n                                        .slice(0, index)\n                                        .concat(e.value)\n                                        .concat(value.slice(index + 1))\n                                });\n                            }} />\n                    );\n                })}\n            </section>\n        );\n\n    }\n\n    renderTuple(schema, value, pointer) {\n\n        const {items, title} = schema;\n\n        return (\n            <section className=\"ui-field variant-tuple\" rules={schema}>\n                <Title level={3}>{title}</Title>\n                {items.map((item, index) => {\n                    const type = item.type;\n                    const recordPointer = `${pointer}/${index}`;\n                    const Field = factory.getComponent(type);\n                    return (\n                        <Field\n                            key={recordPointer}\n                            schema={item}\n                            value={value[index]}\n                            name={index + ''}\n                            onChange={e => {\n                                super.onChange({\n                                    type: 'change',\n                                    target: this,\n                                    value: value\n                                        .slice(0, index)\n                                        .concat(e.value)\n                                        .concat(value.slice(index + 1))\n                                });\n                            }}/>\n                    );\n                })}\n            </section>\n        );\n\n    }\n\n    render() {\n\n        const {schema, pointer} = this.props;\n        const value = this.state.value;\n\n        const items = schema.items;\n\n        return Array.isArray(items)\n            ? this.renderTuple(schema, value, pointer)\n            : this.renderArray(schema, value, pointer);\n\n    }\n\n}\n\nArrayComponent.propTypes = {\n    ...InputComponent.propTypes,\n    value: PropTypes.array,\n    defaultValue: PropTypes.array\n};\n\nArrayComponent.defaultProps = {\n    ...InputComponent.defaultProps,\n    value: [],\n    defaultValue: []\n};\n\nfactory.registerComponent('array', ArrayComponent);\n\n"],"sourceRoot":"/source/"}