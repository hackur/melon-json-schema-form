{"version":3,"sources":["array/VariableArray.js"],"names":["VariableArrayItem","args","onChange","bind","onUpward","onDownward","shouldComponentUpdate","nextProps","props","e","index","value","stopPropagation","render","schema","level","name","removable","downable","Field","upButton","downButton","deleteButton","title","propTypes","object","number","bool","string","any","func","onRemove","VariableArray","onFieldUpward","onFieldRemove","onFieldDownward","onFieldChange","state","type","target","slice","thisValue","pointer","items","minItems","maxItems","Infinity","length","addButton","map","record","arr","validity","displayName","defaultProps","isRequired","Array","isArray"],"mappings":"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","file":"array/VariableArray.js","sourcesContent":["/**\n * @file Variable Array\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport InputComponent from 'melon-core/InputComponent';\nimport {registerComponent, getComponent} from '../factory';\nimport Button from 'melon/Button';\nimport Icon from 'melon/Icon';\nimport resolveDefaults from '../util/resolveDefaults';\nimport Validity from 'melon-core/Validity';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport class VariableArrayItem extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onChange = this.onChange.bind(this);\n        this.onUpward = this.onUpward.bind(this);\n        this.onDownward = this.onDownward.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    onChange(e) {\n\n        const {\n            onChange,\n            index\n        } = this.props;\n\n        onChange({\n            value: e.value,\n            index\n        });\n\n    }\n\n    onUpward(e) {\n\n        e.stopPropagation();\n\n        const {\n            index,\n            onUpward\n        } = this.props;\n\n        onUpward(index);\n\n    }\n\n    onDownward(e) {\n\n        e.stopPropagation();\n\n        const {\n            index,\n            onDownward\n        } = this.props;\n\n        onDownward(index);\n\n    }\n\n    render() {\n\n        const {\n            schema,\n            level,\n            index,\n            name,\n            value,\n            removable,\n            downable\n        } = this.props;\n\n        const Field = getComponent(schema);\n\n        if (!Field) {\n            return null;\n        }\n\n\n        const upButton = index\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['info', 'icon']}\n                    onClick={this.onUpward}>\n                    <Icon icon=\"arrow-upward\" />\n                </Button>\n            )\n            : null;\n\n        const downButton = downable\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['info', 'icon']}\n                    onClick={this.onDownward}>\n                    <Icon icon=\"arrow-downward\" />\n                </Button>\n            )\n            : null;\n\n        const deleteButton = removable\n            ? (\n                <Button\n                    size=\"xxs\"\n                    variants={['danger', 'icon']}\n                    onClick={() => {\n\n                    }}>\n                    <Icon icon=\"delete\" />\n                </Button>\n            )\n            : null;\n\n        const title = (\n            <header className=\"ui-field-array-item-title\">\n                <label>{index + 1}.</label>\n                {upButton}\n                {downButton}\n                {deleteButton}\n            </header>\n        );\n\n        return (\n            <li>\n                {title}\n                <Field\n                    level={level}\n                    name={name}\n                    value={value}\n                    schema={schema}\n                    onChange={this.onChange} />\n            </li>\n        );\n    }\n\n}\n\nVariableArrayItem.propTypes = {\n    schema: PropTypes.object,\n    level: PropTypes.number,\n    index: PropTypes.number,\n    removable: PropTypes.bool,\n    downable: PropTypes.bool,\n    name: PropTypes.string,\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    onUpward: PropTypes.func,\n    onDownward: PropTypes.func,\n    onRemove: PropTypes.func\n};\n\nexport default class VariableArray extends InputComponent {\n\n    constructor(...args) {\n        super(...args);\n        this.onFieldUpward = this.onFieldUpward.bind(this);\n        this.onFieldRemove = this.onFieldRemove.bind(this);\n        this.onFieldDownward = this.onFieldDownward.bind(this);\n        this.onFieldChange = this.onFieldChange.bind(this);\n    }\n\n    onFieldUpward(index) {\n\n        const value = this.state.value;\n\n        this.onChange({\n            type: 'change',\n            target: this,\n            value: [\n                ...value.slice(0, index - 1),\n                value[index],\n                value[index - 1],\n                ...value.slice(index + 1)\n            ]\n        });\n\n    }\n\n    onFieldRemove(index) {\n        const value = this.state.value;\n\n        this.onChange({\n            type: 'change',\n            target: this,\n            value: [\n                ...value.slice(0, index),\n                ...value.slice(index + 1)\n            ]\n        });\n    }\n\n    onFieldDownward(index) {\n\n        const value = this.state.value;\n\n        this.onChange({\n            type: 'change',\n            target: this,\n            value: [\n                ...value.slice(0, index),\n                value[index + 1],\n                value[index],\n                ...value.slice(index + 2)\n            ]\n        });\n\n    }\n\n    onFieldChange(e) {\n\n        const thisValue = this.state.value;\n        const {\n            value,\n            index\n        } = e;\n\n        this.onChange({\n            type: 'change',\n            target: this,\n            value: [\n                ...thisValue.slice(0, index),\n                value,\n                ...thisValue.slice(index + 1)\n            ]\n        });\n\n    }\n\n    render() {\n\n        const {\n            pointer,\n            props\n        } = this;\n\n        let {\n            schema,\n            level,\n            value\n        } = props;\n\n        const {\n            items,\n            title,\n            minItems = 1,\n            maxItems = Infinity\n        } = schema;\n\n        // 如果 value 没有任何一项，那这个时候数组空\n        // 那么我先做一个默认值项出来\n        if (!value || !value.length) {\n            value = resolveDefaults(items);\n        }\n\n        const addButton = maxItems > value.length\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['icon', 'info']}\n                    onClick={() => {\n                        this.onChange({\n                            type: 'change',\n                            target: this,\n                            value: [\n                                ...value,\n                                ...resolveDefaults(schema)\n                            ]\n                        });\n                    }}>\n                    <Icon icon=\"add\" />\n                </Button>\n            )\n            : null;\n\n        return (\n            <fieldset className=\"ui-field ui-field-array variant-array\">\n                <header\n                    className=\"ui-field-title ui-field-array-title variant-level-4\">\n                    <label>{title}</label>\n                    {addButton}\n                </header>\n                <ul className=\"ui-field-content\">\n                    {value.map((record, index, arr) => (\n                        <VariableArrayItem\n                            key={`${pointer}/${index}`}\n                            schema={items}\n                            removable={minItems < arr.length}\n                            downable={index < arr.length - 1}\n                            level={level + 1}\n                            index={index}\n                            name={index + ''}\n                            value={record}\n                            onChange={this.onFieldChange}\n                            onUpward={this.onFieldUpward}\n                            onDownward={this.onFieldDownward} />\n                    ))}\n                </ul>\n                <Validity validity={this.state.validity} />\n            </fieldset>\n        );\n\n    }\n\n}\n\nVariableArray.displayName = 'VariableArray';\n\nVariableArray.defaultProps = {\n    ...InputComponent.defaultProps,\n    onChange: PropTypes.func.isRequired,\n    value: []\n};\n\nregisterComponent(function (schema) {\n\n    const {\n        type,\n        items\n    } = schema;\n\n    if (type === 'array' && !Array.isArray(items)) {\n        return VariableArray;\n    }\n\n});\n"],"sourceRoot":"/source/"}