{"version":3,"sources":["array/Tuple.js"],"names":["ArrayTupleItem","args","onFieldChange","bind","shouldComponentUpdate","nextProps","props","e","target","value","onChange","index","type","render","level","schema","name","Field","ArrayTuple","tuple","state","slice","pointer","items","title","titleClassName","map","item","recordPointer","itemValue","propTypes","array","object","number","defaultProps","Array","isArray"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;QAYaA,c,WAAAA,c;;;AAET,kCAAqB;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAAA,qEACjB,gDAASA,IAAT,EADiB;;AAEjB,kBAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,OAArB;AAFiB;AAGpB;;iCAEDC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAa,KAAKC,KAAlB,EAAyBD,SAAzB,CAAR;AACH,S;;iCAEDH,a,0BAAcK,C,EAAG;AAAA,gBAGTC,MAHS,GAKTD,CALS,CAGTC,MAHS;AAAA,gBAITC,KAJS,GAKTF,CALS,CAITE,KAJS;AAAA,yBAUT,KAAKH,KAVI;AAAA,gBAQTI,QARS,UAQTA,QARS;AAAA,gBASTC,KATS,UASTA,KATS;;;AAYbD,qBAAS;AACLE,sBAAM,QADD;AAELJ,8BAFK;AAGLC,4BAHK;AAILE;AAJK,aAAT;AAOH,S;;iCAEDE,M,qBAAS;AAAA,0BAQD,KAAKP,KARJ;AAAA,gBAGDQ,KAHC,WAGDA,KAHC;AAAA,gBAIDC,MAJC,WAIDA,MAJC;AAAA,gBAKDN,KALC,WAKDA,KALC;AAAA,gBAMDO,IANC,WAMDA,IANC;AAAA,gBAODC,KAPC,WAODA,KAPC;;;AAWL,mBACI,iCAAC,KAAD;AACI,uBAAOH,KADX;AAEI,wBAAQC,MAFZ;AAGI,uBAAON,KAHX;AAII,sBAAMO,IAJV;AAKI,0BAAU,KAAKd,aALnB,GADJ;AASH,S;;;;;QAIgBgB,U;;;AAEjB,8BAAqB;AAAA;;AAAA,+CAANjB,IAAM;AAANA,oBAAM;AAAA;;AAAA,sEACjB,0DAASA,IAAT,EADiB;;AAEjB,mBAAKC,aAAL,GAAqB,OAAKA,aAAL,CAAmBC,IAAnB,QAArB;AAFiB;AAGpB;;6BAEDD,a,0BAAcK,C,EAAG;;AAEb,gBAAMY,QAAQ,KAAKC,KAAL,CAAWX,KAAzB;;AAFa,gBAKTE,KALS,GAOTJ,CAPS,CAKTI,KALS;AAAA,gBAMTF,KANS,GAOTF,CAPS,CAMTE,KANS;;;AASb,iBAAKC,QAAL,CAAc;AACVF,wBAAQ,IADE;AAEVC,iCACOU,MAAME,KAAN,CAAY,CAAZ,EAAeV,KAAf,CADP,GAEIF,KAFJ,GAGOU,MAAME,KAAN,CAAYV,QAAQ,CAApB,CAHP;AAFU,aAAd;AASH,S;;6BAEDE,M,qBAAS;AAAA;;AAAA,gBAEEP,KAFF,GAEoB,IAFpB,CAEEA,KAFF;AAAA,gBAESgB,OAFT,GAEoB,IAFpB,CAESA,OAFT;AAAA,gBAKDP,MALC,GAQDT,KARC,CAKDS,MALC;AAAA,gBAMDN,KANC,GAQDH,KARC,CAMDG,KANC;AAAA,gBAODK,KAPC,GAQDR,KARC,CAODQ,KAPC;AAAA,gBAUES,KAVF,GAUkBR,MAVlB,CAUEQ,KAVF;AAAA,gBAUSC,KAVT,GAUkBT,MAVlB,CAUSS,KAVT;;;AAYL,gBAAMC,iBAAiB,gCACnB,sBADmB,EAEnB,gBAFmB,qBAGFX,KAHE,CAAvB;;AAMA,mBACI;AAAA;AAAA,kBAAU,WAAU,uCAApB;AACI;AAAA;AAAA,sBAAQ,WAAWW,cAAnB;AACKD;AADL,iBADJ;AAII;AAAA;AAAA,sBAAI,WAAU,kBAAd;AACKD,0BAAMG,GAAN,CAAU,UAACC,IAAD,EAAOhB,KAAP,EAAiB;;AAExB,4BAAMM,QAAQ,2BAAaU,IAAb,CAAd;;AAEA,4BAAI,CAACV,KAAL,EAAY;AACR,mCAAO,IAAP;AACH;;AAED,4BAAMW,gBAAmBN,OAAnB,SAA8BX,KAApC;AACA,4BAAMkB,YAAYpB,SAASA,MAAME,KAAN,CAAT,IAAyB,kCAAgBgB,IAAhB,CAA3C;;AAEA,+BACI;AAAA;AAAA,8BAAI,KAAKC,aAAT;AACI,6DAAC,cAAD;AACI,uCAAOX,KADX;AAEI,uCAAOH,QAAQ,CAFnB;AAGI,wCAAQa,IAHZ;AAII,uCAAOE,SAJX;AAKI,uCAAOlB,KALX;AAMI,sCAAMA,QAAQ,EANlB;AAOI,0CAAU,OAAKT,aAPnB;AADJ,yBADJ;AAYH,qBAvBA;AADL;AAJJ,aADJ;AAkCH,S;;;;;yBA/EgBgB,U;;;AAmFrBA,eAAWY,SAAX,+BACO,4BAAeA,SADtB;AAEIrB,eAAO,iBAAUsB,KAFrB;AAGIhB,gBAAQ,iBAAUiB,MAHtB;AAIIlB,eAAO,iBAAUmB;AAJrB;;AAOAf,eAAWgB,YAAX,+BACO,4BAAeA,YADtB;AAEIzB,eAAO;AAFX;;AAKA,oCAAkB,UAAUM,MAAV,EAAkB;AAAA,YAG5BH,IAH4B,GAK5BG,MAL4B,CAG5BH,IAH4B;AAAA,YAI5BW,KAJ4B,GAK5BR,MAL4B,CAI5BQ,KAJ4B;;;AAOhC,YAAIX,SAAS,OAAT,IAAoBuB,MAAMC,OAAN,CAAcb,KAAd,CAAxB,EAA8C;AAC1C,mBAAOL,UAAP;AACH;AAEJ,KAXD","file":"array/Tuple.js","sourcesContent":["/**\n * @file Tulpe\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport InputComponent from 'melon-core/InputComponent';\nimport {createClassName} from 'melon-core/classname/classname';\nimport {registerComponent, getComponent} from '../factory';\nimport resolveDefaults from '../util/resolveDefaults';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport class ArrayTupleItem extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onFieldChange = this.onFieldChange.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(this.props, nextProps);\n    }\n\n    onFieldChange(e) {\n\n        const {\n            target,\n            value\n        } = e;\n\n        const {\n            onChange,\n            index\n        } = this.props;\n\n        onChange({\n            type: 'change',\n            target,\n            value,\n            index\n        });\n\n    }\n\n    render() {\n\n        const {\n            level,\n            schema,\n            value,\n            name,\n            Field\n        } = this.props;\n\n\n        return (\n            <Field\n                level={level}\n                schema={schema}\n                value={value}\n                name={name}\n                onChange={this.onFieldChange} />\n        );\n\n    }\n\n}\n\nexport default class ArrayTuple extends InputComponent {\n\n    constructor(...args) {\n        super(...args);\n        this.onFieldChange = this.onFieldChange.bind(this);\n    }\n\n    onFieldChange(e) {\n\n        const tuple = this.state.value;\n\n        const {\n            index,\n            value\n        } = e;\n\n        this.onChange({\n            target: this,\n            value: [\n                ...tuple.slice(0, index),\n                value,\n                ...tuple.slice(index + 1)\n            ]\n        });\n\n    }\n\n    render() {\n\n        const {props, pointer} = this;\n\n        const {\n            schema,\n            value,\n            level\n        } = props;\n\n        const {items, title} = schema;\n\n        const titleClassName = createClassName(\n            'ui-field-array-title',\n            'ui-field-title',\n            `variant-level-${level}`\n        );\n\n        return (\n            <fieldset className=\"ui-field ui-field-array variant-tuple\">\n                <header className={titleClassName}>\n                    {title}\n                </header>\n                <ol className=\"ui-field-content\">\n                    {items.map((item, index) => {\n\n                        const Field = getComponent(item);\n\n                        if (!Field) {\n                            return null;\n                        }\n\n                        const recordPointer = `${pointer}/${index}`;\n                        const itemValue = value && value[index] || resolveDefaults(item);\n\n                        return (\n                            <li key={recordPointer}>\n                                <ArrayTupleItem\n                                    Field={Field}\n                                    level={level + 1}\n                                    schema={item}\n                                    value={itemValue}\n                                    index={index}\n                                    name={index + ''}\n                                    onChange={this.onFieldChange} />\n                            </li>\n                        );\n                    })}\n                </ol>\n            </fieldset>\n        );\n\n    }\n\n}\n\nArrayTuple.propTypes = {\n    ...InputComponent.propTypes,\n    value: PropTypes.array,\n    schema: PropTypes.object,\n    level: PropTypes.number\n};\n\nArrayTuple.defaultProps = {\n    ...InputComponent.defaultProps,\n    value: []\n};\n\nregisterComponent(function (schema) {\n\n    const {\n        type,\n        items\n    } = schema;\n\n    if (type === 'array' && Array.isArray(items)) {\n        return ArrayTuple;\n    }\n\n});\n"],"sourceRoot":"/source/"}