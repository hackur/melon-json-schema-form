{"version":3,"sources":["array/CheckBox.js"],"names":["ArrayCheckBox","shouldComponentUpdate","nextProps","props","render","schema","name","value","onChange","titleClassName","title","items","enumNames","options","map","item","index","propTypes","object","isRequired","func","type","uniqueItems"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QAWqBA,a;;;;;;;;gCAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAa,KAAKC,KAAlB,EAAyBD,SAAzB,CAAR;AACH,S;;gCAEDE,M,qBAAS;AAAA,yBAOD,KAAKD,KAPJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,IAJC,UAIDA,IAJC;AAAA,gBAKDC,KALC,UAKDA,KALC;AAAA,gBAMDC,QANC,UAMDA,QANC;;;AASL,gBAAMC,iBAAiB,gCACnB,gBADmB,EAEnB,iBAFmB,CAAvB;;AATK,gBAcEC,KAdF,GAckBL,MAdlB,CAcEK,KAdF;AAAA,gBAcSC,KAdT,GAckBN,MAdlB,CAcSM,KAdT;;AAeL,gBAAMC,YAAYD,MAAMC,SAAN,IAAmB,EAArC;;AAEA,gBAAMC,UAAUF,cAAWG,GAAX,CAAe,UAACC,IAAD,EAAOC,KAAP;AAAA,uBAC3B;AAAA;AAAA,sBAAQ,KAAI,MAAZ,EAAmB,OAAOD,IAA1B;AAAiCH,8BAAUI,KAAV,KAAoBD;AAArD,iBAD2B;AAAA,aAAf,CAAhB;;AAIA,mBACI;AAAA;AAAA;AACI,+BAAU,yCADd;AAEI;AAAA;AAAA,sBAAQ,WAAWN,cAAnB;AAAoCC;AAApC,iBAFJ;AAGI;AAAA;AAAA;AACI,8BAAK,KADT;AAEI,8BAAMJ,IAFV;AAGI,+BAAOD,MAHX;AAII,+BAAOE,KAJX;AAKI,kCAAUC,QALd;AAMKK;AANL;AAHJ,aADJ;AAeH,S;;;;;yBA1CgBb,a;;;AA+CrBA,kBAAciB,SAAd,GAA0B;AACtBZ,gBAAQ,iBAAUa,MAAV,CAAiBC,UADH;AAEtBX,kBAAU,iBAAUY,IAAV,CAAeD;AAFH,KAA1B;;AAKA,oCAAkB,UAAUd,MAAV,EAAkB;AAAA,YAG5BgB,IAH4B,GAM5BhB,MAN4B,CAG5BgB,IAH4B;AAAA,YAI5BC,WAJ4B,GAM5BjB,MAN4B,CAI5BiB,WAJ4B;AAAA,YAK5BX,KAL4B,GAM5BN,MAN4B,CAK5BM,KAL4B;;;AAQhC,YACIU,SAAS,OAAT,IACGC,WADH,IAEG,QAAOX,KAAP,wDAAOA,KAAP,OAAiB,QAFpB,IAGGA,MAAMU,IAAN,KAAe,QAHlB,IAIGV,aALP,EAME;AACE,mBAAOX,aAAP;AACH;AAEJ,KAlBD","file":"CheckBox.js","sourcesContent":["/**\n * @file ArrayCheckBox\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport BoxGroup from 'melon/BoxGroup';\nimport {createClassName} from 'melon-core/classname/classname';\nimport {registerComponent} from '../factory';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport default class ArrayCheckBox extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(this.props, nextProps);\n    }\n\n    render() {\n\n        const {\n            schema,\n            name,\n            value,\n            onChange\n        } = this.props;\n\n        const titleClassName = createClassName(\n            'ui-field-title',\n            'variant-level-4'\n        );\n\n        const {title, items} = schema;\n        const enumNames = items.enumNames || [];\n\n        const options = items.enum.map((item, index) => (\n            <option key=\"item\" value={item}>{enumNames[index] || item}</option>\n        ));\n\n        return (\n            <div\n                className=\"ui-field ui-field-string variant-string\" >\n                <header className={titleClassName}>{title}</header>\n                <BoxGroup\n                    size=\"xxs\"\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    onChange={onChange}>\n                    {options}\n                </BoxGroup>\n            </div>\n        );\n\n    }\n\n}\n\n\nArrayCheckBox.propTypes = {\n    schema: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired\n};\n\nregisterComponent(function (schema) {\n\n    const {\n        type,\n        uniqueItems,\n        items\n    } = schema;\n\n    if (\n        type === 'array'\n        && uniqueItems\n        && typeof items === 'object'\n        && items.type === 'string'\n        && items.enum\n    ) {\n        return ArrayCheckBox;\n    }\n\n});\n"]}