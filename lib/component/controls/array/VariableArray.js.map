{"version":3,"sources":["component/controls/array/VariableArray.js"],"names":["VariableArrayItem","args","onRemove","bind","onUpward","onDownward","shouldComponentUpdate","nextProps","props","e","stopPropagation","index","render","schema","uiSchema","name","removable","downable","upButton","downButton","deleteButton","title","propTypes","object","number","bool","upable","func","VariableArray","onFieldUpward","onFieldDownward","onFieldRemove","onFieldAdd","actions","arrayPush","items","validate","arraySwap","arraySplice","value","meta","minItems","maxItems","Number","MAX_VALUE","description","Array","isArray","addButton","length","fields","map","record","arr","key","$items","touched","error","invalid","message","className","displayName","string","isRequired","array","type"],"mappings":"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","file":"VariableArray.js","sourcesContent":["/**\n * @file Variable Array\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport Button from 'melon/Button';\nimport Icon from 'melon/Icon';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport Field from '../../Field';\nimport Control from '../Control';\nimport {registerControl} from '../../../factory';\nimport {format} from '../../../util/field';\nimport cx from 'classnames';\nimport ValidityLabel from '../../ValidityLabel';\nimport {fill} from '../../../util/schema';\n\nexport class VariableArrayItem extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onRemove = this.onRemove.bind(this);\n        this.onUpward = this.onUpward.bind(this);\n        this.onDownward = this.onDownward.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    onUpward(e) {\n\n        e.stopPropagation();\n\n        const {\n            index,\n            onUpward\n        } = this.props;\n\n        onUpward(index);\n\n    }\n\n    onDownward(e) {\n\n        e.stopPropagation();\n\n        const {\n            index,\n            onDownward\n        } = this.props;\n\n        onDownward(index);\n\n    }\n\n    onRemove() {\n\n        const {\n            index,\n            onRemove\n        } = this.props;\n\n        onRemove(index);\n\n    }\n\n    render() {\n\n        const {\n            schema,\n            uiSchema,\n            name,\n            removable,\n            downable,\n            index\n        } = this.props;\n\n        const upButton = index\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['info', 'icon']}\n                    onClick={this.onUpward}>\n                    <Icon icon=\"arrow-upward\" />\n                </Button>\n            )\n            : null;\n\n        const downButton = downable\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['info', 'icon']}\n                    onClick={this.onDownward}>\n                    <Icon icon=\"arrow-downward\" />\n                </Button>\n            )\n            : null;\n\n        const deleteButton = removable\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['danger', 'icon']}\n                    onClick={this.onRemove}>\n                    <Icon icon=\"delete\" />\n                </Button>\n            )\n            : null;\n\n        const title = (\n            <header className=\"ui-control-variable-array-item-title\">\n                <label>{index + 1}.</label>\n                {upButton}\n                {downButton}\n                {deleteButton}\n            </header>\n        );\n\n        return (\n            <div className=\"ui-control-variable-array-item\">\n                {title}\n                <div className=\"ui-control-variable-array-item-content\">\n                    <Field\n                        name={name}\n                        schema={schema}\n                        uiSchema={uiSchema}\n                        control={Control}\n                        format={format} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nVariableArrayItem.propTypes = {\n    schema: PropTypes.object,\n    index: PropTypes.number,\n    removable: PropTypes.bool,\n    downable: PropTypes.bool,\n    upable: PropTypes.bool,\n    onUpward: PropTypes.func,\n    onDownward: PropTypes.func,\n    onRemove: PropTypes.func\n};\n\nexport default class VariableArray extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onFieldUpward = this.onFieldUpward.bind(this);\n        this.onFieldDownward = this.onFieldDownward.bind(this);\n        this.onFieldRemove = this.onFieldRemove.bind(this);\n        this.onFieldAdd = this.onFieldAdd.bind(this);\n    }\n\n    onFieldAdd() {\n\n        const {\n            actions,\n            name,\n            schema\n        } = this.props;\n\n        actions.arrayPush(name, fill(void 0, schema.items));\n        actions.validate(name);\n\n    }\n\n    onFieldUpward(index) {\n\n        const {\n            actions,\n            name\n        } = this.props;\n\n        actions.arraySwap(name, index, index - 1);\n        actions.validate(name);\n\n    }\n\n    onFieldDownward(index) {\n\n        const {\n            actions,\n            name\n        } = this.props;\n\n        actions.arraySwap(name, index, index + 1);\n        actions.validate(name);\n\n    }\n\n    onFieldRemove(index) {\n\n        const {\n            actions,\n            name\n        } = this.props;\n\n        actions.arraySplice(name, index, 1);\n        actions.validate(name);\n\n    }\n\n    render() {\n\n        let {\n            name,\n            schema,\n            value,\n            uiSchema,\n            meta\n        } = this.props;\n\n        const {\n            items,\n            minItems = 1,\n            maxItems = Number.MAX_VALUE,\n            title,\n            description\n        } = schema;\n\n        if (!Array.isArray(value)) {\n            value = [];\n        }\n\n        const addButton = maxItems > value.length\n            ? (\n                <Button\n                    type=\"button\"\n                    size=\"xxs\"\n                    variants={['icon', 'info']}\n                    onClick={this.onFieldAdd}>\n                    <Icon icon=\"add\" />\n                </Button>\n            )\n            : null;\n\n        const fields = value.length\n            ? value.map((record, index, arr) => {\n                const key = `${name}[${index}]`;\n                return (\n                    <VariableArrayItem\n                        key={key}\n                        name={key}\n                        schema={items}\n                        uiSchema={uiSchema && uiSchema.$items}\n                        index={index}\n                        removable={minItems < arr.length}\n                        downable={index < arr.length - 1}\n                        upable={index > 1}\n                        onUpward={this.onFieldUpward}\n                        onDownward={this.onFieldDownward}\n                        onRemove={this.onFieldRemove} />\n                );\n            })\n            : (\n                <p className=\"ui-control-variable-array-empty-list\">\n                    <Button\n                        type=\"button\"\n                        size=\"xs\"\n                        variants={['info']}\n                        onClick={this.onFieldAdd}>暂无条目，点击添加</Button>\n                </p>\n            );\n\n        const {\n            touched,\n            error\n        } = meta;\n\n        const invalid = touched && error && error.message;\n\n        const className = cx(\n            'ui-control-variable-array',\n            {\n                'state-invalid': invalid,\n                'state-valid': !invalid\n            }\n        );\n\n        return (\n            <div className={className}>\n                <header className=\"ui-control-variable-array-title\">\n                    {title}\n                    {addButton}\n                </header>\n                {\n                    description\n                        ? (\n                            <p className=\"ui-control-variable-array-description\">\n                                {description}\n                            </p>\n                        )\n                        : null\n                }\n                <ValidityLabel {...meta} />\n                <ul className=\"ui-control-variable-array-list\">\n                    {fields}\n                </ul>\n            </div>\n        );\n\n    }\n\n}\n\nVariableArray.displayName = 'VariableArray';\n\nVariableArray.propTypes = {\n    name: PropTypes.string.isRequired,\n    schema: PropTypes.object.isRequired,\n    uiSchema: PropTypes.object,\n    actions: PropTypes.object.isRequired,\n    value: PropTypes.array\n};\n\nregisterControl(function (schema) {\n\n    const {\n        type,\n        items\n    } = schema;\n\n    if (type === 'array' && !Array.isArray(items)) {\n        return VariableArray;\n    }\n\n});\n"]}