{"version":3,"sources":["component/controls/array/CheckBox.js"],"names":["ArrayCheckBox","args","onChange","bind","shouldComponentUpdate","nextProps","props","e","actions","name","validate","change","value","render","schema","meta","title","items","description","enumNames","options","map","item","index","error","touched","invalid","message","className","variants","length","propTypes","object","isRequired","type","uniqueItems"],"mappings":"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","file":"component/controls/array/CheckBox.js","sourcesContent":["/**\n * @file ArrayCheckBox\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport BoxGroup from 'melon/BoxGroup';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport {registerControl} from '../../../factory';\nimport cx from 'classnames';\nimport ValidityLabel from '../../ValidityLabel';\n\nexport default class ArrayCheckBox extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(this.props, nextProps);\n    }\n\n    onChange(e) {\n        const {actions, name} = this.props;\n        const {validate, change} = actions;\n        change(name, e.value);\n        validate(name);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            meta\n        } = this.props;\n\n        const {\n            title,\n            items,\n            description\n        } = schema;\n\n        const enumNames = items.enumNames || [];\n\n        const options = items\n            .enum\n            .map((item, index) => (\n                <option\n                    key=\"item\"\n                    value={item}>\n                    {enumNames[index] || item}\n                </option>\n            ));\n\n        const {\n            error,\n            touched\n        } = meta;\n\n        const invalid = touched && error && error.message;\n\n        const className = cx(\n            'ui-control-checkbox',\n            {\n                'state-valid': !invalid,\n                'state-invalid': invalid\n            }\n        );\n\n        const variants = [\n            items.enum.length > 3 ? 'horizontal' : null,\n        ];\n\n        return (\n            <div className={className}>\n                {\n                    title\n                        ? (\n                            <header className=\"ui-control-checkbox-title\">\n                                {title}\n                            </header>\n                        )\n                        : null\n                }\n                {\n                    description\n                        ? (\n                            <p className=\"ui-control-checkbox-description\">\n                                {description}\n                            </p>\n                        )\n                        : null\n                }\n                <BoxGroup\n                    size=\"xxs\"\n                    variants={variants}\n                    states={{invalid}}\n                    value={value}\n                    onChange={this.onChange}>\n                    {options}\n                </BoxGroup>\n                <ValidityLabel {...meta} />\n            </div>\n        );\n\n    }\n\n}\n\n\nArrayCheckBox.propTypes = {\n    schema: PropTypes.object.isRequired\n};\n\nregisterControl(function (schema) {\n\n    const {\n        type,\n        uniqueItems,\n        items\n    } = schema;\n\n    if (\n        type === 'array'\n        && uniqueItems\n        && typeof items === 'object'\n        && items.type === 'string'\n        && items.enum\n    ) {\n        return ArrayCheckBox;\n    }\n\n});\n"],"sourceRoot":"/source/"}