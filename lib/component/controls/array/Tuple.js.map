{"version":3,"sources":["component/controls/array/Tuple.js"],"names":["Tuple","props","name","schema","uiSchema","meta","items","title","description","touched","error","invalid","message","className","map","item","index","key","displayName","propTypes","value","array","object","isRequired","type","Array","isArray"],"mappings":";;;;;;;;;;;;;;;;sBAqBwBA,K;;;;;;;;;;;;;;;;;;AARxB;;AAEA;;;;;;AAMe,aAASA,KAAT,CAAeC,KAAf,EAAsB;AAAA,YAG7BC,IAH6B,GAO7BD,KAP6B,CAG7BC,IAH6B;AAAA,YAI7BC,MAJ6B,GAO7BF,KAP6B,CAI7BE,MAJ6B;AAAA,YAK7BC,QAL6B,GAO7BH,KAP6B,CAK7BG,QAL6B;AAAA,YAM7BC,IAN6B,GAO7BJ,KAP6B,CAM7BI,IAN6B;AAAA,YAU7BC,KAV6B,GAa7BH,MAb6B,CAU7BG,KAV6B;AAAA,YAW7BC,KAX6B,GAa7BJ,MAb6B,CAW7BI,KAX6B;AAAA,YAY7BC,WAZ6B,GAa7BL,MAb6B,CAY7BK,WAZ6B;AAAA,YAgB7BC,OAhB6B,GAkB7BJ,IAlB6B,CAgB7BI,OAhB6B;AAAA,YAiB7BC,KAjB6B,GAkB7BL,IAlB6B,CAiB7BK,KAjB6B;;;AAoBjC,YAAMC,UAAUF,WAAWC,KAAX,IAAoBA,MAAME,OAA1C;;AAEA,YAAMC,YAAY,6BACd,kBADc,EAEd;AACI,2BAAe,CAACF,OADpB;AAEI,6BAAiBA;AAFrB,SAFc,CAAlB;;AAQA,eACI;AAAA;AAAA,cAAK,WAAWE,SAAhB;AAEQN,oBAEQ;AAAA;AAAA,kBAAQ,WAAU,wBAAlB;AACKA;AADL,aAFR,GAMM,IARd;AAWQC,0BAEQ;AAAA;AAAA,kBAAG,WAAU,8BAAb;AACKA;AADL,aAFR,GAMM,IAjBd;AAmBI,yEAAcH,IAAd,CAnBJ;AAoBI;AAAA;AAAA,kBAAI,WAAU,kBAAd;AACKC,sBAAMQ,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACxB,wBAAMC,MAASf,IAAT,SAAiBc,KAAjB,MAAN;AACA,2BACI;AAAA;AAAA,0BAAI,KAAKC,GAAT;AACI;AACI,sCAAUb,YAAYA,SAASY,KAAT,CAD1B;AAEI,oCAAQD,IAFZ;AAGI,kCAAME,GAHV;AAII,yDAJJ;AAKI,iDALJ;AADJ,qBADJ;AAUH,iBAZA;AADL;AApBJ,SADJ;AAuCH,K,CA1FD;;;;;AA4FAjB,UAAMkB,WAAN,GAAoB,OAApB;;AAEAlB,UAAMmB,SAAN,GAAkB;AACdC,eAAO,iBAAUC,KADH;AAEdlB,gBAAQ,iBAAUmB,MAAV,CAAiBC;AAFX,KAAlB;;AAKA,kCAAgB,UAAUpB,MAAV,EAAkB;AAAA,YAG1BqB,IAH0B,GAK1BrB,MAL0B,CAG1BqB,IAH0B;AAAA,YAI1BlB,KAJ0B,GAK1BH,MAL0B,CAI1BG,KAJ0B;;;AAO9B,YAAIkB,SAAS,OAAT,IAAoBC,MAAMC,OAAN,CAAcpB,KAAd,CAAxB,EAA8C;AAC1C,mBAAON,KAAP;AACH;AAEJ,KAXD","file":"component/controls/array/Tuple.js","sourcesContent":["/**\n * @file Tulpe\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {PropTypes} from 'react';\nimport Control from '../Control';\nimport {registerControl} from '../../../factory';\nimport {format} from '../../../util/field';\nimport Field from '../../Field';\nimport cx from 'classnames';\nimport Validity from '../../ValidityLabel';\n\n/* eslint-disable fecs-prefer-class */\n\n/**\n * Tuple\n *\n * @class\n * @param {Object} props 属性\n */\nexport default function Tuple(props) {\n\n    const {\n        name,\n        schema,\n        uiSchema,\n        meta\n    } = props;\n\n    const {\n        items,\n        title,\n        description\n    } = schema;\n\n    const {\n        touched,\n        error\n    } = meta;\n\n    const invalid = touched && error && error.message;\n\n    const className = cx(\n        'ui-control-tuple',\n        {\n            'state-valid': !invalid,\n            'state-invalid': invalid\n        }\n    );\n\n    return (\n        <div className={className}>\n            {\n                title\n                    ? (\n                        <header className=\"ui-control-tuple-title\">\n                            {title}\n                        </header>\n                    )\n                    : null\n            }\n            {\n                description\n                    ? (\n                        <p className=\"ui-control-tuple-description\">\n                            {description}\n                        </p>\n                    )\n                    : null\n            }\n            <Validity {...meta} />\n            <ol className=\"ui-field-content\">\n                {items.map((item, index) => {\n                    const key = `${name}[${index}]`;\n                    return (\n                        <li key={key}>\n                            <Field\n                                uiSchema={uiSchema && uiSchema[index]}\n                                schema={item}\n                                name={key}\n                                control={Control}\n                                format={format} />\n                        </li>\n                    );\n                })}\n            </ol>\n        </div>\n    );\n\n}\n\nTuple.displayName = 'Tuple';\n\nTuple.propTypes = {\n    value: PropTypes.array,\n    schema: PropTypes.object.isRequired\n};\n\nregisterControl(function (schema) {\n\n    const {\n        type,\n        items\n    } = schema;\n\n    if (type === 'array' && Array.isArray(items)) {\n        return Tuple;\n    }\n\n});\n"],"sourceRoot":"/source/"}