{"version":3,"sources":["component/controls/string/Enum.js"],"names":["EnumTextField","shouldComponentUpdate","nextProps","props","render","schema","value","name","actions","meta","title","description","enumNames","error","touched","valid","message","className","defaultValue","change","e","validate","map","item","index","propTypes","object","isRequired","string","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYqBA,a;;;;;;;;;gCAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;gCAEDC,M,qBAAS;AAAA,yBAQD,KAAKD,KARJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,IALC,UAKDA,IALC;AAAA,gBAMDC,OANC,UAMDA,OANC;AAAA,gBAODC,IAPC,UAODA,IAPC;AAAA,gBAWDC,KAXC,GAcDL,MAdC,CAWDK,KAXC;AAAA,gBAYDC,WAZC,GAcDN,MAdC,CAYDM,WAZC;AAAA,gBAaDC,SAbC,GAcDP,MAdC,CAaDO,SAbC;AAAA,gBAiBDC,KAjBC,GAmBDJ,IAnBC,CAiBDI,KAjBC;AAAA,gBAkBDC,OAlBC,GAmBDL,IAnBC,CAkBDK,OAlBC;;;AAqBL,gBAAMC,QAAQD,WAAWD,KAAX,IAAoBA,MAAMG,OAAxC;;AAEA,gBAAMC,YAAY,6BACd,iBADc,EAEd;AACI,iCAAiB,CAACF,KADtB;AAEI,+BAAeA;AAFnB,aAFc,CAAlB;;AAQA,mBACI;AAAA;AAAA,kBAAK,WAAWE,SAAhB;AAEQP,wBACM;AAAA;AAAA;AACE,mCAAU,uBADZ;AAEGA;AAFH,iBADN,GAKM,IAPd;AAUQC,8BACM;AAAA;AAAA;AACE,mCAAU,4BADZ;AAEGA;AAFH,iBADN,GAKM,IAfd;AAiBI;AAAA;AAAA;AACI,8BAAK,KADT;AAEI,kCAAU,CAAC,OAAD,CAFd;AAGI,8BAAMJ,IAHV;AAII,+BAAOD,SAAS,IAAT,GAAgBD,OAAOa,YAAvB,GAAsCZ,KAJjD;AAKI,kCAAU,qBAAK;AACXE,oCAAQW,MAAR,CAAeZ,IAAf,EAAqBa,EAAEd,KAAvB;AACAE,oCAAQa,QAAR,CAAiBd,IAAjB;AACH,yBARL;AASKF,mCAAYiB,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP;AAAA,+BACb;AAAA;AAAA,8BAAQ,KAAKD,IAAb,EAAmB,OAAOA,IAA1B;AACKX,yCAAaA,UAAUY,KAAV,CAAb,IAAiCD;AADtC,yBADa;AAAA,qBAAhB;AATL,iBAjBJ;AAgCI,6EAAmBd,IAAnB;AAhCJ,aADJ;AAqCH,S;;;;;yBA1EgBT,a;;;AA8ErBA,kBAAcyB,SAAd,GAA0B;AACtBpB,gBAAQ,iBAAUqB,MAAV,CAAiBC,UADH;AAEtBrB,eAAO,iBAAUsB;AAFK,KAA1B;;AAKA,kCAAgB,UAAUvB,MAAV,EAAkB;;AAE9B,YACIA,OAAOwB,IAAP,KAAgB,QAAhB,IACGxB,cAFP,EAGE;AACE,mBAAOL,aAAP;AACH;AAEJ,KATD","file":"Enum.js","sourcesContent":["/**\n * @file EnumTextField\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport Select from 'melon/Select';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport cx from 'classnames';\nimport ValidityLabel from '../../ValidityLabel';\nimport {registerControl} from '../../../factory';\n\nexport default class EnumTextField extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            name,\n            actions,\n            meta\n        } = this.props;\n\n        const {\n            title,\n            description,\n            enumNames\n        } = schema;\n\n        const {\n            error,\n            touched\n        } = meta;\n\n        const valid = touched && error && error.message;\n\n        const className = cx(\n            'ui-control-enum',\n            {\n                'state-invalid': !valid,\n                'state-valid': valid\n            }\n        );\n\n        return (\n            <div className={className}>\n                {\n                    title\n                        ? <header\n                            className=\"ui-control-enum-title\">\n                            {title}\n                        </header>\n                        : null\n                }\n                {\n                    description\n                        ? <p\n                            className=\"ui-control-enum-decription\">\n                            {description}\n                        </p>\n                        : null\n                }\n                <Select\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    name={name}\n                    value={value == null ? schema.defaultValue : value}\n                    onChange={e => {\n                        actions.change(name, e.value);\n                        actions.validate(name);\n                    }}>\n                    {schema.enum.map((item, index) => (\n                        <option key={item} value={item}>\n                            {enumNames && enumNames[index] || item}\n                        </option>\n                    ))}\n                </Select>\n                <ValidityLabel {...meta} />\n            </div>\n        );\n\n    }\n\n}\n\nEnumTextField.propTypes = {\n    schema: PropTypes.object.isRequired,\n    value: PropTypes.string\n};\n\nregisterControl(function (schema) {\n\n    if (\n        schema.type === 'string'\n        && schema.enum\n    ) {\n        return EnumTextField;\n    }\n\n});\n"]}