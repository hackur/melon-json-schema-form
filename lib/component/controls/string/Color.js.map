{"version":3,"sources":["component/controls/string/Color.js"],"names":["ColorControl","args","onChange","bind","shouldComponentUpdate","nextProps","props","value","name","actions","validate","change","render","schema","meta","title","description","error","touched","invalid","message","className","displayName","propTypes","object","isRequired","type","format"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYqBA,Y;;;AAEjB,gCAAqB;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAAA,yDACjB,gDAASA,IAAT,EADiB;;AAEjB,kBAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AAFiB;AAGpB;;+BAEDC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;+BAEDJ,Q,2BAAkB;AAAA,gBAARK,KAAQ,QAARA,KAAQ;AAAA,yBAKV,KAAKD,KALK;AAAA,gBAGVE,IAHU,UAGVA,IAHU;AAAA,gBAIVC,OAJU,UAIVA,OAJU;AAAA,gBAQVC,QARU,GAUVD,OAVU,CAQVC,QARU;AAAA,gBASVC,MATU,GAUVF,OAVU,CASVE,MATU;;;AAYdA,mBAAOH,IAAP,EAAaD,KAAb;AACAG,qBAASF,IAAT;AAEH,S;;+BAEDI,M,qBAAS;AAAA,0BAOD,KAAKN,KAPJ;AAAA,gBAGDO,MAHC,WAGDA,MAHC;AAAA,gBAIDN,KAJC,WAIDA,KAJC;AAAA,gBAKDC,IALC,WAKDA,IALC;AAAA,gBAMDM,IANC,WAMDA,IANC;AAAA,gBAUDC,KAVC,GAYDF,MAZC,CAUDE,KAVC;AAAA,gBAWDC,WAXC,GAYDH,MAZC,CAWDG,WAXC;AAAA,gBAeDC,KAfC,GAiBDH,IAjBC,CAeDG,KAfC;AAAA,gBAgBDC,OAhBC,GAiBDJ,IAjBC,CAgBDI,OAhBC;;;AAmBL,gBAAMC,UAAUD,WAAWD,KAAX,IAAoBA,MAAMG,OAA1C;;AAEA,gBAAMC,YAAY,6BACd,kBADc,EAEd;AACI,+BAAe,CAACF,OADpB;AAEI,iCAAiBA;AAFrB,aAFc,CAAlB;;AAQA,mBACI;AAAA;AAAA,kBAAK,WAAWE,SAAhB;AAEQN,wBACM;AAAA;AAAA;AACE,mCAAU,wBADZ;AAEGA;AAFH,iBADN,GAKM,IAPd;AAUQC,8BACM;AAAA;AAAA;AACE,mCAAU,6BADZ;AAEGA;AAFH,iBADN,GAKM,IAfd;AAiBI;AACI,0BAAK,KADT;AAEI,8BAAU,CAAC,OAAD,CAFd;AAGI,4BAAQ,EAACG,gBAAD,EAHZ;AAII,0BAAMX,IAJV;AAKI,2BAAOK,MALX;AAMI,2BAAON,KANX;AAOI,8BAAU,KAAKL,QAPnB,GAjBJ;AAyBI,6EAAmBY,IAAnB;AAzBJ,aADJ;AA8BH,S;;;;;yBAvFgBd,Y;;;AA2FrBA,iBAAasB,WAAb,GAA2B,cAA3B;;AAEAtB,iBAAauB,SAAb,GAAyB;AACrBV,gBAAQ,iBAAUW,MAAV,CAAiBC;AADJ,KAAzB;;AAIA,kCAAgB,UAAUZ,MAAV,EAAkB;;AAE9B,YACIA,OAAOa,IAAP,KAAgB,QAAhB,IACGb,OAAOc,MAAP,KAAkB,OAFzB,EAGE;AACE,mBAAO3B,YAAP;AACH;AAEJ,KATD","file":"component/controls/string/Color.js","sourcesContent":["/**\n * @file Color\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport ColorPicker from 'melon-colorpicker';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport {registerControl} from '../../../factory';\nimport cx from 'classnames';\nimport ValidityLabel from '../../ValidityLabel';\n\nexport default class ColorControl extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    onChange({value}) {\n\n        const {\n            name,\n            actions\n        } = this.props;\n\n        const {\n            validate,\n            change\n        } = actions;\n\n        change(name, value);\n        validate(name);\n\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            name,\n            meta\n        } = this.props;\n\n        const {\n            title,\n            description\n        } = schema;\n\n        const {\n            error,\n            touched\n        } = meta;\n\n        const invalid = touched && error && error.message;\n\n        const className = cx(\n            'ui-control-color',\n            {\n                'state-valid': !invalid,\n                'state-invalid': invalid\n            }\n        );\n\n        return (\n            <div className={className}>\n                {\n                    title\n                        ? <header\n                            className=\"ui-control-color-title\">\n                            {title}\n                        </header>\n                        : null\n                }\n                {\n                    description\n                        ? <p\n                            className=\"ui-control-color-decription\">\n                            {description}\n                        </p>\n                        : null\n                }\n                <ColorPicker\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    states={{invalid}}\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    onChange={this.onChange} />\n                <ValidityLabel {...meta} />\n            </div>\n        );\n\n    }\n\n}\n\nColorControl.displayName = 'ColorControl';\n\nColorControl.propTypes = {\n    schema: PropTypes.object.isRequired\n};\n\nregisterControl(function (schema) {\n\n    if (\n        schema.type === 'string'\n        && schema.format === 'color'\n    ) {\n        return ColorControl;\n    }\n\n});\n"],"sourceRoot":"/source/"}