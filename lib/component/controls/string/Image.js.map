{"version":3,"sources":["component/controls/string/Image.js"],"names":["Image","shouldComponentUpdate","nextProps","props","render","schema","value","name","actions","meta","title","description","pending","touched","error","valid","message","className","maxWidth","file","change","upload","stopPending","propTypes","object","isRequired","string","type","media","test"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYqBA,K;;;;;;;;;wBAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;wBAEDC,M,qBAAS;AAAA,yBAQD,KAAKD,KARJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,IALC,UAKDA,IALC;AAAA,gBAMDC,OANC,UAMDA,OANC;AAAA,gBAODC,IAPC,UAODA,IAPC;AAAA,gBAWDC,KAXC,GAaDL,MAbC,CAWDK,KAXC;AAAA,gBAYDC,WAZC,GAaDN,MAbC,CAYDM,WAZC;AAAA,gBAgBDC,OAhBC,GAmBDH,IAnBC,CAgBDG,OAhBC;AAAA,gBAiBDC,OAjBC,GAmBDJ,IAnBC,CAiBDI,OAjBC;AAAA,gBAkBDC,KAlBC,GAmBDL,IAnBC,CAkBDK,KAlBC;;;AAqBL,gBAAMC,QAAQF,WAAWC,KAAX,IAAoBA,MAAME,OAAxC;;AAEA,gBAAMC,YAAY,6BACd,kBADc,EAEd;AACI,+BAAeF,KADnB;AAEI,iCAAiB,CAACA;AAFtB,aAFc,CAAlB;;AAQA,mBACI;AAAA;AAAA,kBAAK,WAAWE,SAAhB;AAEQP,wBACM;AAAA;AAAA;AACE,mCAAU,wBADZ;AAEGA;AAFH,iBADN,GAKM,IAPd;AAUQC,8BACM;AAAA;AAAA;AACE,mCAAU,6BADZ;AAEGA;AAFH,iBADN,GAKM,IAfd;AAiBI;AACI,0BAAK,KADT;AAEI,8BAAU,CAAC,OAAD,CAFd;AAGI,2BAAO,EAACO,UAAU,MAAX,EAHX;AAII,+BAAWN,OAJf;AAKI,kCAAc,4BAAQ;;AAElB,4BAAI,CAACO,IAAL,EAAW;AACPX,oCAAQY,MAAR,CAAeb,IAAf,EAAqB,EAArB;AACA;AACH;;AAEDC,gCAAQa,MAAR,CAAed,IAAf,EAAqBY,IAArB;AAEH,qBAdL;AAeI,oCAAgB,0BAAM;AAClBX,gCAAQc,WAAR,CAAoBf,IAApB;AACH,qBAjBL;AAkBI,2BAAOD,KAlBX,GAjBJ;AAoCI,6EAAmBG,IAAnB;AApCJ,aADJ;AAyCH,S;;;;;yBA9EgBT,K;;;AAkFrBA,UAAMuB,SAAN,GAAkB;AACdlB,gBAAQ,iBAAUmB,MAAV,CAAiBC,UADX;AAEdnB,eAAO,iBAAUoB;AAFH,KAAlB;;AAKA,kCAAgB,UAAUrB,MAAV,EAAkB;;AAE9B,YACIA,OAAOsB,IAAP,KAAgB,QAAhB,IACGtB,OAAOuB,KADV,IAEG,WAAWC,IAAX,CAAgBxB,OAAOuB,KAAP,CAAaD,IAA7B,CAHP,EAIE;AACE,mBAAO3B,KAAP;AACH;AAEJ,KAVD","file":"Image.js","sourcesContent":["/**\n * @file Image\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport Uploader from 'melon/Uploader';\nimport shallowEqual from 'melon-core/util/shallowEqual';\nimport {registerControl} from '../../../factory';\nimport ValidityLabel from '../../ValidityLabel';\nimport cx from 'classnames';\n\nexport default class Image extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            name,\n            actions,\n            meta\n        } = this.props;\n\n        const {\n            title,\n            description\n        } = schema;\n\n        const {\n            pending,\n            touched,\n            error\n        } = meta;\n\n        const valid = touched && error && error.message;\n\n        const className = cx(\n            'ui-control-image',\n            {\n                'state-valid': valid,\n                'state-invalid': !valid\n            }\n        );\n\n        return (\n            <div className={className}>\n                {\n                    title\n                        ? <header\n                            className=\"ui-control-image-title\">\n                            {title}\n                        </header>\n                        : null\n                }\n                {\n                    description\n                        ? <p\n                            className=\"ui-control-image-decription\">\n                            {description}\n                        </p>\n                        : null\n                }\n                <Uploader\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    style={{maxWidth: '100%'}}\n                    uploading={pending}\n                    onFileChange={file => {\n\n                        if (!file) {\n                            actions.change(name, '');\n                            return;\n                        }\n\n                        actions.upload(name, file);\n\n                    }}\n                    onUploadCancel={() => {\n                        actions.stopPending(name);\n                    }}\n                    value={value} />\n                <ValidityLabel {...meta} />\n            </div>\n        );\n\n    }\n\n}\n\nImage.propTypes = {\n    schema: PropTypes.object.isRequired,\n    value: PropTypes.string\n};\n\nregisterControl(function (schema) {\n\n    if (\n        schema.type === 'string'\n        && schema.media\n        && /^image\\//.test(schema.media.type)\n    ) {\n        return Image;\n    }\n\n});\n"]}