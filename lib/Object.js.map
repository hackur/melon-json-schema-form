{"version":3,"sources":["Object.js"],"names":["main","ObjectField","args","onFieldChange","bind","renderTitle","title","e","target","value","onChange","state","props","name","render","pointer","schema","level","style","properties","Object","keys","map","subSchema","Field","getComponent","displayName","propTypes","object","defaultValue","defaultProps","registerComponent","type"],"mappings":";;;;;;;;;;;;;;;;;;;QAMYA,I;;;;;;QAKSC,W;;;AAEjB,+BAAqB;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAAA,qEACjB,0DAASA,IAAT,EADiB;;AAEjB,kBAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,OAArB;AAFiB;AAGpB;;8BAEDC,W,wBAAYC,K,EAAO;;AAEf,gBAAI,CAACA,KAAL,EAAY;AACR,uBAAO,IAAP;AACH;;AAED,mBACI;AAAA;AAAA;AACI;AAAA;AAAA,sBAAO,OAAO,CAAd,EAAiB,MAAK,KAAtB;AAA6BA;AAA7B;AADJ,aADJ;AAMH,S;;8BAEDH,a,0BAAcI,C,EAAG;AAAA;;AAAA,gBAGTC,MAHS,GAKTD,CALS,CAGTC,MAHS;AAAA,gBAITC,KAJS,GAKTF,CALS,CAITE,KAJS;;;AAOb,iBAAKC,QAAL,CAAc;AACVF,wBAAQ,IADE;AAEVC,mDACO,KAAKE,KAAL,CAAWF,KADlB,qDAEKD,OAAOI,KAAP,CAAaC,IAFlB,IAEyBJ,KAFzB;AAFU,aAAd;AAQH,S;;8BAEDK,M,qBAAS;AAAA;;AAAA,gBAEEF,KAFF,GAEoB,IAFpB,CAEEA,KAFF;AAAA,gBAESG,OAFT,GAEoB,IAFpB,CAESA,OAFT;AAAA,gBAGEC,MAHF,GAG0BJ,KAH1B,CAGEI,MAHF;AAAA,gBAGUC,KAHV,GAG0BL,KAH1B,CAGUK,KAHV;AAAA,gBAGiBC,KAHjB,GAG0BN,KAH1B,CAGiBM,KAHjB;AAAA,gBAIEC,UAJF,GAIuBH,MAJvB,CAIEG,UAJF;AAAA,gBAIcb,KAJd,GAIuBU,MAJvB,CAIcV,KAJd;;;AAML,gBAAMG,QAAQ,KAAKE,KAAL,CAAWF,KAAzB;;AAEA,mBACI;AAAA;AAAA;AACI,oCAAcM,OADlB;AAEI,+BAAU,sBAFd;AAGI,2BAAOG,KAHX;AAII;AAAA;AAAA,sBAAQ,WAAU,sCAAlB;AACKZ;AADL,iBAJJ;AAOI;AAAA;AAAA,sBAAI,WAAU,kBAAd;AACKc,2BAAOC,IAAP,CAAYF,UAAZ,EAAwBG,GAAxB,CAA4B,gBAAQ;AACjC,4BAAMC,YAAYJ,WAAWN,IAAX,CAAlB;AACA,4BAAMW,QAAQxB,KAAKyB,YAAL,CAAkBF,SAAlB,CAAd;AACA,4BAAI,CAACC,KAAL,EAAY;AACR,mCAAO,IAAP;AACH;AACD,+BACI;AAAA;AAAA,8BAAI,KAAQT,OAAR,SAAmBF,IAAvB;AACI,6DAAC,KAAD;AACI,wCAAQU,SADZ;AAEI,uCAAON,QAAQ,CAFnB;AAGI,uCAAOR,MAAMI,IAAN,CAHX;AAII,sCAAMA,IAJV;AAKI,0CAAU,OAAKV,aALnB;AADJ,yBADJ;AAUH,qBAhBA;AADL;AAPJ,aADJ;AA6BH,S;;;;;yBA3EgBF,W;;;AA+ErBA,gBAAYyB,WAAZ,GAA0B,QAA1B;;AAEAzB,gBAAY0B,SAAZ,+BACO,4BAAeA,SADtB;AAEIlB,eAAO,iBAAUmB,MAFrB;AAGIC,sBAAc,iBAAUD;AAH5B;;AAMA3B,gBAAY6B,YAAZ,+BACO,4BAAeA,YADtB;AAEIrB,eAAO,EAFX;AAGIoB,sBAAc;AAHlB;;AAOA7B,SAAK+B,iBAAL,CAAuB,UAAUf,MAAV,EAAkB;;AAErC,YAAIA,OAAOgB,IAAP,KAAgB,QAApB,EAA8B;AAC1B,mBAAO/B,WAAP;AACH;AAEJ,KAND","file":"Object.js","sourcesContent":["/**\n * @file object render\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PropTypes} from 'react';\nimport * as main from './factory';\n\nimport InputComponent from 'melon-core/InputComponent';\nimport Title from 'melon/Title';\n\nexport default class ObjectField extends InputComponent {\n\n    constructor(...args) {\n        super(...args);\n        this.onFieldChange = this.onFieldChange.bind(this);\n    }\n\n    renderTitle(title) {\n\n        if (!title) {\n            return null;\n        }\n\n        return (\n            <legend>\n                <Title level={4} size=\"xxs\">{title}</Title>\n            </legend>\n        );\n\n    }\n\n    onFieldChange(e) {\n\n        const {\n            target,\n            value\n        } = e;\n\n        this.onChange({\n            target: this,\n            value: {\n                ...this.state.value,\n                [target.props.name]: value\n            }\n        });\n\n    }\n\n    render() {\n\n        const {props, pointer} = this;\n        const {schema, level, style} = props;\n        const {properties, title} = schema;\n\n        const value = this.state.value;\n\n        return (\n            <fieldset\n                data-pointer={pointer}\n                className=\"ui-field variant-map\"\n                style={style}>\n                <header className=\"ui-field-title ui-field-object-title\">\n                    {title}\n                </header>\n                <ul className=\"ui-field-content\">\n                    {Object.keys(properties).map(name => {\n                        const subSchema = properties[name];\n                        const Field = main.getComponent(subSchema);\n                        if (!Field) {\n                            return null;\n                        }\n                        return (\n                            <li key={`${pointer}/${name}`}>\n                                <Field\n                                    schema={subSchema}\n                                    level={level + 1}\n                                    value={value[name]}\n                                    name={name}\n                                    onChange={this.onFieldChange} />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </fieldset>\n        );\n    }\n\n}\n\nObjectField.displayName = 'Object';\n\nObjectField.propTypes = {\n    ...InputComponent.propTypes,\n    value: PropTypes.object,\n    defaultValue: PropTypes.object\n};\n\nObjectField.defaultProps = {\n    ...InputComponent.defaultProps,\n    value: {},\n    defaultValue: {}\n};\n\n\nmain.registerComponent(function (schema) {\n\n    if (schema.type === 'object') {\n        return ObjectField;\n    }\n\n});\n"],"sourceRoot":"/source/"}