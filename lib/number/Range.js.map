{"version":3,"sources":["number/Range.js"],"names":["Range","shouldComponentUpdate","nextProps","props","render","schema","value","onChange","name","maximum","minimum","title","titleClassName","propTypes","func","isRequired","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QAWqBA,K;;;;;;;;wBAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;wBAEDC,M,qBAAS;AAAA,yBAOD,KAAKD,KAPJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,KAJC,UAIDA,KAJC;AAAA,gBAKDC,QALC,UAKDA,QALC;AAAA,gBAMDC,IANC,UAMDA,IANC;AAAA,gBAUDC,OAVC,GAaDJ,MAbC,CAUDI,OAVC;AAAA,gBAWDC,OAXC,GAaDL,MAbC,CAWDK,OAXC;AAAA,gBAYDC,KAZC,GAaDN,MAbC,CAYDM,KAZC;;;AAeL,gBAAMC,iBAAiB,gCACnB,gBADmB,EAEnB,iBAFmB,CAAvB;;AAKA,mBACI;AAAA;AAAA,kBAAK,WAAU,yCAAf;AACI;AAAA;AAAA,sBAAQ,WAAWA,cAAnB;AAAoCD;AAApC,iBADJ;AAEI;AACI,0BAAK,KADT;AAEI,8BAAU,CAAC,OAAD,CAFd;AAGI,0BAAMH,IAHV;AAII,2BAAOH,MAJX;AAKI,2BAAOC,KALX;AAMI,kCAAcD,iBANlB;AAOI,6BAASI,OAPb;AAQI,6BAASC,OARb;AASI,8BAAUH,QATd;AAFJ,aADJ;AAgBH,S;;;;;yBA1CgBP,K;;;AA8CrBA,UAAMa,SAAN,GAAkB;AACdN,kBAAU,iBAAUO,IAAV,CAAeC;AADX,KAAlB;;AAIA,oCAAkB,UAAUV,MAAV,EAAkB;AAAA,YAG5BW,IAH4B,GAM5BX,MAN4B,CAG5BW,IAH4B;AAAA,YAI5BP,OAJ4B,GAM5BJ,MAN4B,CAI5BI,OAJ4B;AAAA,YAK5BC,OAL4B,GAM5BL,MAN4B,CAK5BK,OAL4B;;;AAQhC,YACI,CAACM,SAAS,QAAT,IAAqBA,SAAS,SAA/B,KACGP,WAAW,IADd,IACsBC,WAAW,IAFrC,EAGE;AACE,mBAAOV,KAAP;AACH;AAEJ,KAfD","file":"Range.js","sourcesContent":["/**\n * @file Range\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport Slider from 'melon/Slider';\nimport {registerComponent} from '../factory';\nimport {createClassName} from 'melon-core/classname/classname';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport default class Range extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            value,\n            onChange,\n            name\n        } = this.props;\n\n        const {\n            maximum,\n            minimum,\n            title\n        } = schema;\n\n        const titleClassName = createClassName(\n            'ui-field-title',\n            'variant-level-4'\n        );\n\n        return (\n            <div className=\"ui-field ui-field-string variant-string\">\n                <header className={titleClassName}>{title}</header>\n                <Slider\n                    size=\"xxs\"\n                    variants={['fluid']}\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    defaultValue={schema.default}\n                    maximum={maximum}\n                    minimum={minimum}\n                    onChange={onChange} />\n            </div>\n        );\n\n    }\n\n}\n\nRange.propTypes = {\n    onChange: PropTypes.func.isRequired\n};\n\nregisterComponent(function (schema) {\n\n    const {\n        type,\n        maximum,\n        minimum\n    } = schema;\n\n    if (\n        (type === 'number' || type === 'integer')\n        && maximum != null && minimum != null\n    ) {\n        return Range;\n    }\n\n});\n"]}