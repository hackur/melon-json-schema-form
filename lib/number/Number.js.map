{"version":3,"sources":["number/Number.js"],"names":["NumberComponent","args","onKeyDown","bind","onBlur","shouldComponentUpdate","nextProps","props","e","value","onChange","keyCode","shiftKey","altKey","metaKey","currentValue","target","preventDefault","type","refs","textbox","toFixed","getValue","render","schema","name","rest","divisibleBy","max","Infinity","min","titleClassName","title","displayName","propTypes","func","isRequired"],"mappings":"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","file":"number/Number.js","sourcesContent":["/**\n * @file number render\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport {registerComponent} from '../factory';\nimport {createClassName} from 'melon-core/classname/classname';\nimport NumberBox from './NumberBox';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport default class NumberComponent extends Component {\n\n    constructor(...args) {\n        super(...args);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    onKeyDown(e) {\n\n        const {value, onChange} = this.props;\n\n        const {\n            keyCode,\n            shiftKey,\n            altKey,\n            metaKey\n        } = e;\n\n        let currentValue = e.target.value;\n\n        // 如果是上或下，那么要做额外数字处理\n        // shift 是 10x，alt 是 0.1x 其他就是 1x\n        if (keyCode === 38 || keyCode === 40) {\n\n            e.preventDefault();\n\n            currentValue = (+currentValue)\n                + (keyCode === 38 ? 1 : -1)\n                * (metaKey ? 100 : (shiftKey ? 10 : (altKey ? 0.1 : 1)));\n\n            onChange({\n                type: 'change',\n                target: this.refs.textbox,\n                value: +currentValue.toFixed(3)\n            });\n\n            return;\n        }\n\n        // 如果是回车，相当于触发了一个 blur\n        if (keyCode === 13 && currentValue !== value) {\n            onChange({\n                type: 'change',\n                target: this.refs.textbox,\n                value: currentValue === '' ? value : +currentValue\n            });\n        }\n\n    }\n\n    onBlur(e) {\n\n        const {onChange, value} = this.props;\n        const target = e.target;\n        const currentValue = target.getValue();\n\n        if (currentValue !== value) {\n            onChange({\n                type: 'change',\n                target,\n                value: currentValue === '' ? value : currentValue\n            });\n        }\n\n    }\n\n    render() {\n\n        const {\n            schema,\n            name,\n            ...rest\n        } = this.props;\n\n        const {\n            divisibleBy,\n            max = Infinity,\n            min = -Infinity,\n            type\n        } = schema;\n\n        const value = this.props.value;\n        const titleClassName = createClassName(\n            'ui-field-title',\n            'variant-level-4'\n        );\n\n        return (\n            <div className=\"ui-field ui-field-number variant-number\">\n                <header className={titleClassName}>{schema.title}</header>\n                <NumberBox\n                    {...rest}\n                    onChange={null}\n                    ref=\"textbox\"\n                    size=\"xxs\"\n                    step={divisibleBy || type === 'integer' ? 1 : 0.001}\n                    min={min}\n                    max={max}\n                    variants={['fluid']}\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    defaultValue={schema.default}\n                    validateEvents={['blur']}\n                    onKeyDown={this.onKeyDown}\n                    onBlur={this.onBlur} />\n            </div>\n        );\n\n    }\n\n}\n\nNumberComponent.displayName = 'Number';\n\nNumberComponent.propTypes = {\n    onChange: PropTypes.func.isRequired\n};\n\nregisterComponent(function (schema) {\n\n    const type = schema.type;\n\n    if (type === 'number' || type === 'integer') {\n        return NumberComponent;\n    }\n\n});\n"],"sourceRoot":"/source/"}