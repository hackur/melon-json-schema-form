{"version":3,"sources":["number/Number.js"],"names":["NumberComponent","shouldComponentUpdate","nextProps","props","render","schema","name","onChange","rest","divisibleBy","max","Infinity","min","value","titleClassName","title","displayName","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QAWqBA,e;;;;;;;;kCAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAO,CAAC,+BAAaA,SAAb,EAAwB,KAAKC,KAA7B,CAAR;AACH,S;;kCAEDC,M,qBAAS;AAAA,yBAOD,KAAKD,KAPJ;AAAA,gBAGDE,MAHC,UAGDA,MAHC;AAAA,gBAIDC,IAJC,UAIDA,IAJC;AAAA,gBAKDC,QALC,UAKDA,QALC;AAAA,gBAMEC,IANF;AAAA,sCAaDH,MAbC,CAUDI,WAVC;AAAA,gBAUDA,WAVC,uCAUa,CAVb;AAAA,8BAaDJ,MAbC,CAWDK,GAXC;AAAA,gBAWDA,GAXC,+BAWKC,QAXL;AAAA,8BAaDN,MAbC,CAYDO,GAZC;AAAA,gBAYDA,GAZC,+BAYK,CAACD,QAZN;;;AAeL,gBAAME,QAAQ,KAAKV,KAAL,CAAWU,KAAzB;AACA,gBAAMC,iBAAiB,gCACnB,gBADmB,EAEnB,iBAFmB,CAAvB;AAIA,mBACI;AAAA;AAAA,kBAAK,WAAU,yCAAf;AACI;AAAA;AAAA,sBAAQ,WAAWA,cAAnB;AAAoCT,2BAAOU;AAA3C,iBADJ;AAEI,qGACQP,IADR;AAEI,0BAAK,KAFT;AAGI,0BAAMC,WAHV;AAII,yBAAKG,GAJT;AAKI,yBAAKF,GALT;AAMI,8BAAU,CAAC,OAAD,CANd;AAOI,0BAAMJ,IAPV;AAQI,2BAAOD,MARX;AASI,2BAAOQ,KATX;AAUI,kCAAcR,iBAVlB;AAWI,8BAAUE,QAXd;AAFJ,aADJ;AAkBH,S;;;;;yBA5CgBP,e;;;AAgDrBA,oBAAgBgB,WAAhB,GAA8B,QAA9B;;AAEA,oCAAkB,UAAUX,MAAV,EAAkB;;AAEhC,YAAMY,OAAOZ,OAAOY,IAApB;;AAEA,YAAIA,SAAS,QAAT,IAAqBA,SAAS,SAAlC,EAA6C;AACzC,mBAAOjB,eAAP;AACH;AAEJ,KARD","file":"number/Number.js","sourcesContent":["/**\n * @file number render\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component} from 'react';\nimport {registerComponent} from '../factory';\nimport {createClassName} from 'melon-core/classname/classname';\nimport NumberBox from './NumberBox';\nimport shallowEqual from 'melon-core/util/shallowEqual';\n\nexport default class NumberComponent extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return !shallowEqual(nextProps, this.props);\n    }\n\n    render() {\n\n        const {\n            schema,\n            name,\n            onChange,\n            ...rest\n        } = this.props;\n\n        const {\n            divisibleBy = 1,\n            max = Infinity,\n            min = -Infinity\n        } = schema;\n\n        const value = this.props.value;\n        const titleClassName = createClassName(\n            'ui-field-title',\n            'variant-level-4'\n        );\n        return (\n            <div className=\"ui-field ui-field-number variant-number\">\n                <header className={titleClassName}>{schema.title}</header>\n                <NumberBox\n                    {...rest}\n                    size=\"xxs\"\n                    step={divisibleBy}\n                    min={min}\n                    max={max}\n                    variants={['fluid']}\n                    name={name}\n                    rules={schema}\n                    value={value}\n                    defaultValue={schema.default}\n                    onChange={onChange} />\n            </div>\n        );\n\n    }\n\n}\n\nNumberComponent.displayName = 'Number';\n\nregisterComponent(function (schema) {\n\n    const type = schema.type;\n\n    if (type === 'number' || type === 'integer') {\n        return NumberComponent;\n    }\n\n});\n"],"sourceRoot":"/source/"}